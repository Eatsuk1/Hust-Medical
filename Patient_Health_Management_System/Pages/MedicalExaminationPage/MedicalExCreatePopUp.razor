@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IMedicalExaminationService MedicalExaminationService
@inject IDiseaseService DiseaseService
@inject IPatientService PatientService

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Create" Class="mr-3 mb-n1" />
            Thêm thông tin đơn khám
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @bind-IsValid="@success">
            <MudAutocomplete T="string" Label="Bệnh nhân" @bind-Value="searchPatient"
                             SearchFunc="@OnSearchPatient" ResetValueOnEmptyText="true" MaxItems="null" />
            <MudAutocomplete T="string" Label="Chẩn đoán" @bind-Value="searchDisease"
                             SearchFunc="@OnSearchDisease" ResetValueOnEmptyText="true" MaxItems="null" />
            <MudNumericField HideSpinButtons="true" @bind-Value="@medicalExaminationForm.Height" Label="Chiều cao (cm)" ReadOnly="false" />
            <MudNumericField HideSpinButtons="true" @bind-Value="@medicalExaminationForm.Weight" Label="Cân nặng (kg)" ReadOnly="false" />
            <MudTextField @bind-Value="@medicalExaminationForm.BloodPressure" Label="Huyết áp (mmHg)" ReadOnly="false" Required="true" RequiredError="Huyết áp không được bỏ trống" />
            <MudTextField @bind-Value="@medicalExaminationForm.VascularIndex" Label="Mạch (lần/ph)" ReadOnly="false" Required="true" RequiredError="Chỉ số mạch không được bỏ trống" />
            <MudTextField @bind-Value="@medicalExaminationForm.BodyTemperature" Label="Thân nhiệt (độ C)" ReadOnly="false" Required="true" RequiredError="Thân nhiệt không được bỏ trống" />
            <MudTextField @bind-Value="@medicalExaminationForm.BreathingRate" Label="Nhịp thở (lần/ph)" ReadOnly="false" Required="true" RequiredError="Nhịp thở không được bỏ trống" />
            <MudTextField @bind-Value="@medicalExaminationForm.Note" Label="Ghi chú" ReadOnly="false" />
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Outlined" OnClick="@(_ => Cancel())">Hủy</MudButton>
        <MudButton Variant="Variant.Outlined" Disabled="@(!success)" Color="Color.Primary" OnClick="@(_ => Submit())">Lưu</MudButton>
        <MudButton Variant="Variant.Filled" Disabled="@(!success)" Color="Color.Primary" OnClick="@(_ => SubmitAndCreatePrescription())">Lưu và tạo đơn thuốc</MudButton>
    </DialogActions>
</MudDialog>

@code{

    private MedicalExaminationForm medicalExaminationForm = new MedicalExaminationForm();

    private List<Disease> diseases = new List<Disease>();

    private List<Patient> patients = new List<Patient>();

    private string searchDisease = string.Empty;

    private string searchPatient = string.Empty;

    private string userId = string.Empty;

    private string value = string.Empty;

    private bool success = false;

    private IEnumerable<string> options { get; set; } = new HashSet<string>();

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    protected override async Task OnInitializedAsync()
    {
        diseases = await DiseaseService.GetDiseases();
        patients = await PatientService.GetPatients();
        await GetUserId();
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private async Task Submit()
    {
        medicalExaminationForm.PatientId = patients.Where(d => d.Name == searchPatient).FirstOrDefault().Id;
        await MedicalExaminationService.CreateMedicalExamination(medicalExaminationForm, userId);
        MudDialog.Close(DialogResult.Ok(true));
    }

    private async Task SubmitAndCreatePrescription()
    {
        await Submit();
        NavigationManager.NavigateTo($"/prescription/create/{medicalExaminationForm.PatientId}");
    }

    private async Task<IEnumerable<string>> OnSearchPatient(string inputSearch)
    {
        if (string.IsNullOrEmpty(inputSearch))
        {
            return patients.Select(d => d.Name);
        }
        await Task.Delay(0);
        return patients.Where(d => d.Name.Contains(inputSearch, StringComparison.InvariantCultureIgnoreCase) || d.PatientId.Contains(inputSearch, StringComparison.InvariantCultureIgnoreCase))
                       .Select(d => d.Name);
    }

    private async Task<IEnumerable<string>> OnSearchDisease(string inputSearch)
    {   
        if (string.IsNullOrEmpty(inputSearch))
        {
            return diseases.Select(d => d.Name);
        }
        await Task.Delay(0);
        return diseases.Where(d => d.Name.Contains(inputSearch, StringComparison.InvariantCultureIgnoreCase) || d.DiseaseId.Contains(inputSearch, StringComparison.InvariantCultureIgnoreCase))
                       .Select(d => d.Name);
    }

    private async Task GetUserId()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        userId = authState.User.Claims
        .Where(c => c.Type.Equals(ClaimTypes.NameIdentifier))
        .SingleOrDefault().Value;
    }

}