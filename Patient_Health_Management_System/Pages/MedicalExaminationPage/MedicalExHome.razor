@page "/medicalExamination"
@attribute [Authorize(Roles = "Doctor, Admin")]
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IMedicalExaminationService medicalExamService
@inject IPatientService patientService
@inject IDiseaseService diseaseService
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@layout MainLayout

<AuthorizeView Context="contextAuthorize">
    <NotAuthorized>
        <MudText>Not Authorized</MudText>
    </NotAuthorized>
    <Authorized>

        <div class="d-flex" style="height:50rem; background-color:#FAFAFA; border-radius:20px; width:96.7%">
            <div style="display:flex; flex:1; flex-direction:column; padding-top:1rem; margin:0px 20px; width:96.7%">
                <MudText Typo="Typo.h6" Style="padding-bottom:10px">Danh sách thuốc</MudText>

                <MudDataGrid T="MedicalExamination" Items="@medicalExaminations" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@FilterS" FixedHeader="true"
                             FilterCaseSensitivity="DataGridFilterCaseSensitivity.CaseInsensitive" FilterMode="DataGridFilterMode.ColumnFilterMenu"
                             Hideable="true" Striped="true" Bordered="true" Style="overflow:auto; position:relative; width:100%; border-radius:20px;" Height="600px">
                    <ToolBarContent>
                        @*<MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="() => ShowAdd()">Thêm đơn khám mới</MudButton>*@
                        <MudSpacer />
                        <MudTextField @bind-Value="searchS" Placeholder="Tìm kiếm đơn khám" Adornment="Adornment.Start" Immediate="true"
                                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    </ToolBarContent>
                    <Columns>
                        <PropertyColumn Property="m => m.MedicalExaminationId" Title="Mã đơn khám" Sortable="false" Filterable="false" />
                        <PropertyColumn Property="m => patients.Where(p => p.Id.Equals(m.PatientId)).SingleOrDefault().PatientId" Title="Mã bệnh nhân" Sortable="false" Filterable="false" />
                        <PropertyColumn Property="m => patients.Where(p => p.Id.Equals(m.PatientId)).SingleOrDefault().Name" Title="Tên bệnh nhân" />
                        <PropertyColumn Property="m => m.DiseaseName" Title="Chẩn đoán" />
                        <PropertyColumn Property="m => m.CreatedAt.ToLocalTime().ToString(dateTimeFormat)" Title="Thời gian tạo đơn" />
                        <TemplateColumn Sortable="false" Filterable="false" Title="Chức năng">
                            <CellTemplate>
                                <MudMenu AnchorOrigin="Origin.BottomLeft">
                                    <ActivatorContent>
                                        <MudIconButton Icon="@Icons.Material.Filled.MoreHoriz" Color="Color.Primary" Size="Size.Medium" />
                                    </ActivatorContent>
                                    <ChildContent>
                                        <MudMenuItem Icon="@Icons.Material.Filled.Info" IconColor="Color.Info" IconSize="Size.Medium"
                                                     OnClick="(e) => ShowDetail(context.Item.Id, context.Item)">Thông tin chi tiết</MudMenuItem>
                                        <MudMenuItem Icon="@Icons.Material.Filled.Edit" IconColor="Color.Primary" IconSize="Size.Medium"
                                                     OnClick="(e) => ShowUpdate(context.Item.Id, patients.Where(p => p.Id.Equals(context.Item.PatientId)).SingleOrDefault().Name)">Chỉnh sửa thông tin</MudMenuItem>
                                        <MudDivider />
                                        <MudMenuItem OnClick="(e) => CreateNewPrescription(context.Item.PatientId, context.Item.Id)">Tạo đơn thuốc</MudMenuItem>
                                        <MudDivider />
                                        <MudMenuItem Icon="@Icons.Material.Filled.Delete" IconColor="Color.Error" IconSize="Size.Medium"
                                                     OnClick="(e) => ShowDelete(context.Item.Id)">Xóa đơn khám</MudMenuItem>

                                    </ChildContent>
                                </MudMenu>
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>
                    <NoRecordsContent>
                        <MudText>Không tìm thấy dữ liệu</MudText>
                    </NoRecordsContent>

                    <LoadingContent>
                        <MudText>Loading...</MudText>
                    </LoadingContent>
                    <PagerContent>
                        <MudDataGridPager T="MedicalExamination" />
                    </PagerContent>
                </MudDataGrid>
            </div>
        </div>
    </Authorized>
</AuthorizeView>


@code {
    private IEnumerable<MedicalExamination> medicalExaminations = new List<MedicalExamination>();
    private IEnumerable<Patient> patients = new List<Patient>();
    private IEnumerable<Disease> diseases = new List<Disease>();
    private string searchS = "";
    private string dateTimeFormat = "dd/MM/yyyy";

    protected override async Task OnInitializedAsync()
    {
        medicalExaminations = await medicalExamService.GetMedicalExaminations();
        patients = await patientService.GetPatients();
    }

    private async Task ShowDetail(string id, MedicalExamination medicalExamination)
    {
        var parameter = new DialogParameters { ["Id"] = id, ["MedicalEx"] = medicalExamination };
        var dialog = await DialogService.ShowAsync<MedicalExDetailPopUp>("Thông tin đơn khám", parameter);
        var result = await dialog.Result;
    }

    //Deprecated
    //private async Task ShowAdd()
    //{
    //    var dialog = DialogService.Show<MedicalExCreatePopUp>("Thêm đơn khám");
    //    var result = await dialog.Result;
    //    if (!result.Canceled) await InvokeAsync(OnInitializedAsync);
    //}

    private async Task ShowUpdate(string id, string name)
    {
        var parameter = new DialogParameters { ["Id"] = id, ["PatientName"] = name };
        var dialog = DialogService.Show<MedicalExUpdatePopUp>("Sửa thông tin đơn khám", parameter);
        var result = await dialog.Result;
        if (!result.Canceled) await InvokeAsync(OnInitializedAsync);
    }

    private async Task ShowDelete(string id)
    {
        var parameter = new DialogParameters { ["Id"] = id };
        var dialog = DialogService.Show<MedicalExDeletePopUp>("Xóa đơn khám", parameter);
        var result = await dialog.Result;
        if (!result.Canceled) await InvokeAsync(OnInitializedAsync);
    }

    private async Task CreateNewPrescription(string patientId, string id)
    {
        NavigationManager.NavigateTo($"/prescription/create/{patientId}/{id}");
    }

    private bool FilterS(Domain.Models.MedicalExamination medicalExam) => FilterSearch(medicalExam, searchS);

    private bool FilterSearch(Domain.Models.MedicalExamination medicalExam, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if (medicalExam.MedicalExaminationId.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true) return true;
        return false;
    }
}