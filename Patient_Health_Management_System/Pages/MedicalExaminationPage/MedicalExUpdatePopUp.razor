@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IMedicalExaminationService MedicalExaminationService
@inject IDiseaseService DiseaseService
@inject IPatientService PatientService
@inject IMapper mapper

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Create" Class="mr-3 mb-n1" />
            Thêm thông tin đơn khám
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudTextField @bind-Value="@medicalExaminationForm.MedicalExaminationId" Label="Mã đơn khám" ReadOnly="false" />
        <MudAutocomplete T="string" Label="Bệnh nhân" @bind-Value="searchPatient"
                         SearchFunc="@OnSearchPatient" ResetValueOnEmptyText="true" MaxItems="null" />
        <MudTextField @bind-Value="@medicalExaminationForm.DiseaseName" Label="Chẩn đoán" ReadOnly="false" />
        <MudNumericField HideSpinButtons="true" @bind-Value="@medicalExaminationForm.Height" Label="Chiều cao (cm)" ReadOnly="false" />
        <MudNumericField HideSpinButtons="true" @bind-Value="@medicalExaminationForm.Weight" Label="Cân nặng (kg)" ReadOnly="false" />
        <MudTextField @bind-Value="@medicalExaminationForm.BloodPressure" Label="Huyết áp (mmHg)" ReadOnly="false" />
        <MudTextField @bind-Value="@medicalExaminationForm.VascularIndex" Label="Mạch (lần/ph)" ReadOnly="false" />
        <MudTextField @bind-Value="@medicalExaminationForm.BodyTemperature" Label="Thân nhiệt (độ C)" ReadOnly="false" />
        <MudTextField @bind-Value="@medicalExaminationForm.BreathingRate" Label="Nhịp thở (lần/ph)" ReadOnly="false" />
        <MudTextField @bind-Value="@medicalExaminationForm.Note" Label="Ghi chú" ReadOnly="false" />
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Outlined" OnClick="@(_ => Cancel())">Hủy</MudButton>
        <MudButton Color="Color.Primary" OnClick="@(_ => Submit())">Lưu</MudButton>
    </DialogActions>
</MudDialog>

@code {

    private MedicalExaminationForm medicalExaminationForm = new MedicalExaminationForm();

    private List<Domain.Models.Disease> diseases = new List<Domain.Models.Disease>();

    private List<Domain.Models.Patient> patients = new List<Domain.Models.Patient>();

    private string searchDisease = new string("");

    private string searchPatient = new string("");

    private string userId = new string("");

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public string Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var medicineExamination = await MedicalExaminationService.GetMedicalExaminationById(Id);
        mapper = new MapperConfiguration(cfg => cfg.CreateMap<Domain.Models.MedicalExamination, MedicalExaminationForm>()).CreateMapper();
        medicalExaminationForm = mapper.Map<MedicalExaminationForm>(medicineExamination);
        diseases = await DiseaseService.GetDiseases();
        patients = await PatientService.GetPatients();
        await GetUserId();
        GetPatientName();
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private async Task Submit()
    {
        medicalExaminationForm.PatientId = patients.Where(d => d.Name == searchPatient).FirstOrDefault().Id;
        await MedicalExaminationService.UpdateMedicalExaminationById(Id, medicalExaminationForm, userId);
        MudDialog.Close(DialogResult.Ok(true));
    }

    private async Task<IEnumerable<string>> OnSearchPatient(string searchPatient)
    {
        if (string.IsNullOrEmpty(searchPatient))
        {
            return patients.Select(d => d.Name);
        }
        return patients.Where(d => d.Name.Contains(searchPatient, StringComparison.InvariantCultureIgnoreCase) ||
                                   d.PatientId.Contains(searchPatient, StringComparison.InvariantCultureIgnoreCase))
                       .Select(d => d.Name);
    }

    private async Task<IEnumerable<string>> OnSearchDisease(string searchDisease)
    {
        if (string.IsNullOrEmpty(searchDisease))
        {
            return diseases.Select(d => d.Name);
        }
        return diseases.Where(d => d.Name.Contains(searchDisease, StringComparison.InvariantCultureIgnoreCase) ||
                                   d.DiseaseId.Contains(searchDisease, StringComparison.InvariantCultureIgnoreCase))
                       .Select(d => d.Name);
    }

    private void GetPatientName()
    {
        searchPatient = patients.Where(p => p.Id == medicalExaminationForm.PatientId).FirstOrDefault().Name;
    } 

    private async Task GetUserId()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userClaim = authState.User.Claims;
        foreach (var item in userClaim)
        {
            if (item.Type == ClaimTypes.NameIdentifier)
            {
                userId = item.Value;
            }
        }
    }

}