@page "/account"
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ProtectedLocalStorage ProtectedLocalStorage
@inject IUserService UserService
@inject IDialogService DialogService
@layout MainLayout



<MudPaper Style="overflow:hidden; position:relative; margin-top:60px">
    <MudTextField Label="Name" Value="@user.Name" ReadOnly="true"></MudTextField>
    <MudTextField Label="Email" Value="@user.Email" ReadOnly="true"></MudTextField>
    <MudTextField Label="Phone" Value="@user.PhoneNumber" ReadOnly="true"></MudTextField>
    <MudTextField Label="Address" Value="@user.Address" ReadOnly="true"></MudTextField>
    @* <MudAvatar Size="Size.Medium" Rounded="true">
        <MudImage Src=""/>
    </MudAvatar> *@
    <MudField>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="() => ShowUpdate(user)">Chỉnh sửa</MudButton>
    </MudField>    
</MudPaper>

@code{
    private string userId = new string("");

    private User user = new User();

    protected override async Task OnInitializedAsync()
    {
        await GetUserId();
        user = await UserService.GetUserByUserId(userId);
    }

    private async Task ShowUpdate(User user)
    {
        var parameter = new DialogParameters { ["User"] = user };
        var dialog = await DialogService.ShowAsync<AccountUpdatePopUp>("Chỉnh sửa thông tin tài khoản", parameter);
        var result = await dialog.Result;
        await InvokeAsync(OnInitializedAsync);
    }

    private async Task GetUserId()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userClaim = authState.User.Claims;
        foreach (var item in userClaim)
        {
            if (item.Type == ClaimTypes.NameIdentifier)
            {
                userId = item.Value;
            }
        }
    }
}