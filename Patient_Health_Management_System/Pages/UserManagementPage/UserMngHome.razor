@page "/user_management"
@attribute [Authorize(Roles = "Admin, Doctor")]
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IDialogService DialogService
@inject IUserService UserService

<div class="d-flex" style="height:50rem; background-color:#FAFAFA; border-radius:20px; width:96.7%">
    <div style="display:flex; flex:1; flex-direction:column; padding-top:1rem; margin:0px 20px; width:96.7%">
        <MudText Typo="Typo.h6" Style="padding-bottom:10px">Danh sách thuốc</MudText>

        <MudDataGrid T="User" MultiSelection="true" Items="@users" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@FilterS" FixedHeader="true"
                     FilterCaseSensitivity="DataGridFilterCaseSensitivity.CaseInsensitive" FilterMode="DataGridFilterMode.ColumnFilterMenu"
                     Hideable="true" Striped="true" Bordered="true" Style="overflow:auto; position:relative; width:100%; border-radius:20px;" Height="600px">
            <ToolBarContent>
                <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="() => ShowUserCreate(adminId)">Thêm người dùng mới</MudButton>
                <MudSpacer />
                <MudTextField @bind-Value="searchS" Placeholder="Tìm kiếm người dùng" Adornment="Adornment.Start" Immediate="true"
                              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <Columns>
                <SelectColumn T="Medicine" />
                <PropertyColumn Property="m => m.UserId" Title="Mã người dùng" Sortable="false" Filterable="false" />
                <PropertyColumn Property="m => m.Name" Title="Tên người dùng" />
                <PropertyColumn Property="m => m.Specialist" Title="Chuyên khoa" />
                <TemplateColumn Sortable="false" Filterable="false" Title="Chức năng">
                    <CellTemplate>
                        <MudStack Row>
                            <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" Size="Size.Medium"
                                           OnClick="() => ShowUserUpdate(context.Item)" />
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Medium"
                                           OnClick="() => ShowUserDelete(context.Item.Id, adminId, context.Item.Name)" />
                            <MudIconButton Icon="@Icons.Material.Filled.Info" Color="Color.Info" Size="Size.Medium"
                                           OnClick="() => ShowUserDetail(context.Item)" />
                        </MudStack>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
            <NoRecordsContent>
                <MudText>Không tìm thấy dữ liệu</MudText>
            </NoRecordsContent>

            <LoadingContent>
                <MudText>Loading...</MudText>
            </LoadingContent>
            <PagerContent>
                <MudDataGridPager T="User" />
            </PagerContent>
        </MudDataGrid>
    </div>
</div>

@code {
    private IEnumerable<User> users = new List<User>();

    private string adminId = new string("");

    private string searchS = new string("");

    protected override async Task OnInitializedAsync()
    {
        users = await UserService.GetUsers();
        await GetAdminId();
    }

    private async Task ShowUserDetail(User user)
    {
        var parameter = new DialogParameters { ["User"] = user };
        await DialogService.ShowAsync<UserMngDetailPopUp>("Thông tin người dùng", parameter);
    }

    private async Task ShowUserCreate(string adminId)
    {
        var parameter = new DialogParameters { ["AdminId"] = adminId };
        var dialog = await DialogService.ShowAsync<UserMngCreate.UserMngCreatePopUp>("Thêm thông tin người dùng");
        var result = await dialog.Result;
        if (!result.Canceled) await InvokeAsync(OnInitializedAsync);
    }

    private async Task ShowUserUpdate(User user)
    {
        var parameter = new DialogParameters { ["User"] = user };
        var dialog = await DialogService.ShowAsync<UserMngUpdatePopUp>("Chỉnh sửa thông tin người dùng", parameter);
        var result = await dialog.Result;
        if (!result.Canceled) await InvokeAsync(OnInitializedAsync);
    }

    private async Task ShowUserDelete(string id, string adminId, string userName)
    {
        var parameter = new DialogParameters { ["Id"] = id, ["AdminId"] = adminId, ["UserName"] = userName };
        var dialog = await DialogService.ShowAsync<UserMngDeletePopUp>("Xóa thông tin người dùng", parameter);
        var result = await dialog.Result;
        if (!result.Canceled) await InvokeAsync(OnInitializedAsync);
    }

    #region Filter
    private bool FilterS(User user) => FilterSearch(user, searchS);

    private bool FilterSearch(User user, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if (user.Name?.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true) return true;
        return false;
    }
    #endregion

    private async Task GetAdminId()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        adminId = authState.User.Claims
        .Where(c => c.Type.Equals(ClaimTypes.NameIdentifier))
        .SingleOrDefault().Value;
    }
}
