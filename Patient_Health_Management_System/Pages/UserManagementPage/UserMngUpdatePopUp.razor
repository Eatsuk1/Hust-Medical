@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedLocalStorage ProtectedLocalStorage
@inject IDialogService DialogService
@inject IUserService UserService
@inject IAccountService AccountService
@inject ISnackbar Snackbar

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3 mb-n1" />
            Sửa thông tin người dùng
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @bind-IsValid="@success">
            <MudTextField @bind-Value="@userForm.Name" Label="Họ và tên" ReadOnly="false" Required="true" RequiredError="Họ và tên không được bỏ trống" />
            <MudSelect T="string" Label="Giới tính" AnchorOrigin="Origin.BottomCenter" @bind-Value="@userForm.Gender">
                <MudSelectItem Value="@("Nam")" />
                <MudSelectItem Value="@("Nữ")" />
            </MudSelect>
            <MudTextField @bind-Value="@userForm.Address" Label="Địa chỉ" ReadOnly="false" Required="true" RequiredError="Địa chỉ không được bỏ trống" />
            <MudNumericField @bind-Value="@userForm.PhoneNumber" Label="Số điện thoại" HideSpinButtons="true" ReadOnly="false" Required="true" RequiredError="Số điện thoại không được bỏ trống" />
            <MudSelect T="string" Label="Vai trò" AnchorOrigin="Origin.BottomCenter" @bind-SelectedValues="roleIds">
                @foreach (var role in roles)
                {
                    <MudSelectItem T="string" Value="@role.Id">@role.Description</MudSelectItem>
                }
            </MudSelect>
            @if (roleIds.Contains(roles.Where(r => r.Name.Equals("Doctor")).Select(r => r.Id).FirstOrDefault()))
            {
                <MudAutocomplete T="string" Label="Chuyên khoa" @bind-Value="userForm.Specialist" SearchFunc="@OnSearchSpecialist" ResetValueOnEmptyText="true" MaxItems="null" />
            }
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@(_ => Cancel())">Hủy</MudButton>
        <MudButton Variant="Variant.Filled" Disabled="@(!success)" Color="Color.Primary" OnClick="@(_ => Submit())">Lưu</MudButton>
    </DialogActions>
</MudDialog>


@code {

    private AccountForm accountForm = new AccountForm();

    private UserForm userForm = new UserForm();

    private IEnumerable<Role> roles = new List<Role>();

    private IEnumerable<string> roleIds = new HashSet<string>();

    private string accessToken = string.Empty;

    private bool success = false;

    [Parameter]
    public string AdminId { get; set; }

    [Parameter]
    public User User { get; set; }

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    protected override async Task OnInitializedAsync()
    {
        accessToken = await GetAccessToken();
        roles = await AccountService.GetRoles(accessToken);
        roleIds = roles.Where(r => r.Description.Equals(User.Role)).Select(r => r.Id);
        userForm = new MapperConfiguration(cfg => cfg.CreateMap<User, UserForm>()).CreateMapper().Map<UserForm>(User);
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private async Task Submit()
    {
        accountForm.Name = userForm.Name;
        accountForm.Connection = "Username-Password-Authentication";
        userForm.Role = roles.Where(r => r.Id.Equals(roleIds.FirstOrDefault())).Select(r => r.Description).FirstOrDefault();
        await AccountService.UpdateUserNameById(User.UserId, accessToken, accountForm.Name);
        await UserService.UpdateUserByUserId(userForm, User.UserId, AdminId);
        await UpdateUserRole();
        Snackbar.Add("Đổi thông tin thành công", Severity.Success);
        MudDialog.Close(DialogResult.Ok(true));
    }

    private async Task<string> GetAccessToken()
    {
        var existToken = await ProtectedLocalStorage.GetAsync<string>("access_token");
        if (String.IsNullOrEmpty(existToken.Value) || AccountService.IsExpired(existToken.Value))
        {
            var newToken = await AccountService.TokenGenerator();
            await ProtectedLocalStorage.SetAsync("access_token", newToken.access_token);
            existToken = await ProtectedLocalStorage.GetAsync<string>("access_token");
        }
        return existToken.Value;
    }

    private async Task UpdateUserRole()
    {
        if (roleIds.Contains(roles.Where(r => r.Name != "Doctor").Select(r => r.Id).FirstOrDefault()))
        {
            userForm.Specialist = "";
        }
        await AccountService.RemoveRolesFromUserByUserId(User.UserId, accessToken, roleIds);
        await Task.Delay(100);
        await AccountService.AssignRolesToUserByUserId(User.UserId, accessToken, roleIds);
    }

    private async Task<IEnumerable<string>> OnSearchSpecialist(string value)
    {
        if (string.IsNullOrEmpty(value))
        {
            return DefaultVariable.specialist;
        }
        await Task.Delay(0);
        return DefaultVariable.specialist.Where(s => s.Contains(value, StringComparison.InvariantCultureIgnoreCase)).ToList();
    }
}
