@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedLocalStorage ProtectedLocalStorage
@inject IDialogService DialogService
@inject IUserService UserService
@inject IAccountService AccountService

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Create" Class="mr-3 mb-n1" />
            Thêm người dùng mới
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudTextField @bind-Value="@accountForm.Name" Label="Họ và tên" ReadOnly="false" />
        <MudTextField @bind-Value="@accountForm.Email" Label="Email" ReadOnly="false" />
        <MudSelect T="string" Label="Giới tính" AnchorOrigin="Origin.BottomCenter" @bind-Value="@userForm.Gender">
            <MudSelectItem Value="@("Nam")" />
            <MudSelectItem Value="@("Nữ")" />
        </MudSelect>
        <MudTextField @bind-Value="@userForm.Address" Label="Địa chỉ" ReadOnly="false" />
        <MudTextField @bind-Value="@userForm.PhoneNumber" Label="Số điện thoại" ReadOnly="false" />
        <MudSelect T="string" Label="Vai trò" AnchorOrigin="Origin.BottomCenter" @bind-SelectedValues="roleIds">
            @foreach (var role in roles)
            {
                <MudSelectItem T="string" Value="@role.Id">@role.Description</MudSelectItem>
            }
        </MudSelect>
        @if (roleIds.Contains(roles.Where(r => r.Name.Equals("Doctor")).Select(r => r.Id).FirstOrDefault()))
        {
            <MudTextField @bind-Value="@userForm.Specialist" Label="Chuyên khoa" ReadOnly="false" />
        }
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Outlined" OnClick="@(_ => Cancel())">Hủy</MudButton>
        <MudButton Color="Color.Primary" OnClick="@(_ => Submit())">Lưu</MudButton>
    </DialogActions>
</MudDialog>


@code {

    private AccountForm accountForm = new AccountForm();

    private UserForm userForm = new UserForm();

    private IEnumerable<Role> roles = new List<Role>();

    private IEnumerable<string> roleIds = new HashSet<string>();

    private string accessToken = new string("");

    [Parameter]
    public string AdminId { get; set; }

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    protected override async Task OnInitializedAsync()
    {
        accessToken = await GetAccessToken();
        roles = await AccountService.GetRoles(accessToken);
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private async Task Submit()
    {
        userForm.Name = accountForm.Name;
        userForm.Email = accountForm.Email;
        accountForm.Connection = "Username-Password-Authentication";
        await AccountService.CreateUser(accessToken, accountForm);
        var newUser = await AccountService.GetUserByEmail(accessToken, accountForm.Email);
        userForm.UserId = newUser.ToList().FirstOrDefault().UserId;
        await AssignRoleToNewUser();
    }

    private async Task<string> GetAccessToken()
    {
        var existToken = await ProtectedLocalStorage.GetAsync<string>("access_token");
        if (String.IsNullOrEmpty(existToken.Value) || AccountService.IsExpired(existToken.Value))
        {
            var newToken = await AccountService.TokenGenerator();
            await ProtectedLocalStorage.SetAsync("access_token", newToken.access_token);
            existToken = await ProtectedLocalStorage.GetAsync<string>("access_token");
        }
        return existToken.Value;
    }

    private async Task AssignRoleToNewUser()
    {
        var parameter = new DialogParameters { ["RoleIds"] = roleIds, ["AccessToken"] = accessToken, ["UserForm"] = userForm, ["AdminId"] = AdminId };
        var dialog = await DialogService.ShowAsync<UserMngCreate.AssignRoleToNewUser>("Phân quyền cho user mới", parameter);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await InvokeAsync(OnInitializedAsync);
            MudDialog.Close(DialogResult.Ok(true));
        }
    }
}
