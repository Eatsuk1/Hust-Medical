@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IDiseaseService DiseaseService
@inject IMapper mapper

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3 mb-n1" />
            Sửa thông tin bệnh
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudTextField @bind-Value="@diseaseForm.DiseaseId" Label="Mã bệnh" ReadOnly="true" />
        <MudTextField @bind-Value="@diseaseForm.Name" Label="Tên bệnh" ReadOnly="false" />
        <MudTextField @bind-Value="@diseaseForm.GroupName" Label="Tên nhóm bệnh" ReadOnly="false" />
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Outlined" OnClick="@(_ => MudDialog.Cancel())">Hủy</MudButton>
        <MudButton Color="Color.Primary" OnClick="@(_ => Submit())">Lưu</MudButton>
    </DialogActions>
</MudDialog>


@code {
    private Forms.DiseaseForm diseaseForm = new Forms.DiseaseForm();

    private Models.Disease disease = new Models.Disease();

    private string userId = new string("");

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public string Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        disease = await DiseaseService.GetDiseaseById(Id);
        mapper = new MapperConfiguration(cfg => cfg.CreateMap<Models.Disease, Forms.DiseaseForm>()).CreateMapper();
        diseaseForm = mapper.Map<Forms.DiseaseForm>(disease);
        await GetUserId();
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private async Task Submit()
    {
        await DiseaseService.UpdateDiseaseById(Id, diseaseForm, userId);
        MudDialog.Close(DialogResult.Ok(true));
    }

    private async Task GetUserId()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userClaim = authState.User.Claims;
        foreach (var item in userClaim)
        {
            if (item.Type == ClaimTypes.NameIdentifier)
            {
                userId  = item.Value;
            }
        }
    }
}
