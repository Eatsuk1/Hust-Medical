@page "/prescription"
@attribute [Authorize(Roles = "Doctor, Admin")]
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IPrescriptionService PrescriptionService
@inject IPatientService PatientService
@inject IDialogService DialogService

<PageTitle>Quản lý đơn thuốc</PageTitle>

<AuthorizeView Context="contextAuthorize">
    <NotAuthorized>
        <MudText>Not Authorized</MudText>
    </NotAuthorized>
    <Authorized>
        <div class="d-flex" style="height:50rem; background-color:#FAFAFA; border-radius:20px; width:96.7%">
            <div style="display:flex; flex:1; flex-direction:column; padding-top:1rem; margin:0px 20px; width:96.7%">
                <MudText Typo="Typo.h6" Style="padding-bottom:10px">Danh sách thuốc</MudText>

                <MudDataGrid T="Prescription" Items="@prescriptions" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@FilterS" FixedHeader="true"
                             FilterCaseSensitivity="DataGridFilterCaseSensitivity.CaseInsensitive" FilterMode="DataGridFilterMode.ColumnFilterMenu"
                             Hideable="true" Striped="true" Bordered="true" Style="overflow:auto; position:relative; width:100%; border-radius:20px;" Height="600px">
                    <ToolBarContent>
                        @*<MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="() => CreateNewPrescription()">Thêm đơn thuốc mới</MudButton>*@
                        <MudSpacer />
                        <MudTextField @bind-Value="searchS" Placeholder="Tìm kiếm đơn khám" Adornment="Adornment.Start" Immediate="true"
                                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    </ToolBarContent>
                    <Columns>
                        <PropertyColumn Property="pr => pr.PrescriptionId" Title="Mã đơn khám" Sortable="false" Filterable="false" />
                        <PropertyColumn Property="pr => patients.Where(p => p.Id.Equals(pr.PatientId)).SingleOrDefault().PatientId" Title="Mã bệnh nhân" Sortable="false" Filterable="false" />
                        <PropertyColumn Property="pr => patients.Where(p => p.Id.Equals(pr.PatientId)).SingleOrDefault().Name" Title="Tên bệnh nhân" />
                        <PropertyColumn Property="pr => pr.CreatedAt.ToLocalTime().ToString(dateTimeFormat)" Title="Thời gian tạo đơn" />
                        <PropertyColumn Property="pr => pr.Note" Title="Ghi chú" />
                        <TemplateColumn Sortable="false" Filterable="false" Title="Chức năng">
                            <CellTemplate>
                                <MudMenu AnchorOrigin="Origin.BottomLeft">
                                    <ActivatorContent>
                                        <MudIconButton Icon="@Icons.Material.Filled.MoreHoriz" Color="Color.Primary" Size="Size.Medium" />
                                    </ActivatorContent>
                                    <ChildContent>
                                        <MudMenuItem Icon="@Icons.Material.Filled.Info" IconColor="Color.Info" IconSize="Size.Medium"
                                                     OnClick="(e) => ShowDetail(context.Item.Id)">Thông tin chi tiết</MudMenuItem>
                                        <MudMenuItem Icon="@Icons.Material.Filled.Edit" IconColor="Color.Primary" IconSize="Size.Medium"
                                                     OnClick="(e) => UpdatePrescription(context.Item.Id)">Chỉnh sửa thông tin</MudMenuItem>
                                        <MudDivider />
                                        <MudMenuItem Icon="@Icons.Material.Filled.Print" IconColor="Color.Info" IconSize="Size.Medium" 
                                                     OnClick="(e) => ShowPrint(context.Item)">In đơn thuốc</MudMenuItem>
                                        <MudDivider />
                                        <MudMenuItem Icon="@Icons.Material.Filled.Delete" IconColor="Color.Error" IconSize="Size.Medium"
                                                     OnClick="(e) => ShowDelete(context.Item.Id)">Xóa đơn thuốc</MudMenuItem>

                                    </ChildContent>
                                </MudMenu>
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>
                    <NoRecordsContent>
                        <MudText>Không tìm thấy dữ liệu</MudText>
                    </NoRecordsContent>

                    <LoadingContent>
                        <MudText>Loading...</MudText>
                    </LoadingContent>
                    <PagerContent>
                        <MudDataGridPager T="Prescription" />
                    </PagerContent>
                </MudDataGrid>
            </div>
        </div>
    </Authorized>
</AuthorizeView>


@code {
    private IEnumerable<Prescription> prescriptions = new List<Prescription>();
    private IEnumerable<Patient> patients = new List<Patient>();
    private string searchS = string.Empty;
    private string dateTimeFormat = "dd/MM/yyyy";
    private string userId = string.Empty;
    private string userRole = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var getUserClaim = await GetUserClaim();
        if (getUserClaim.IsCompletedSuccessfully)
        {
            if (userRole.Equals("Admin"))
            {
                prescriptions = await PrescriptionService.GetPrescriptions();
                patients = await PatientService.GetPatients();
            }
            else
            {
                prescriptions = await PrescriptionService.GetPrescriptionsByDoctorId(userId);
                patients = await PatientService.GetPatientsByDoctorId(userId);
            }
        }
    }

    private async Task ShowDetail(string Id)
    {
        var parameter = new DialogParameters { ["Id"] = Id };
        var dialog = await DialogService.ShowAsync<PresDetailPopUp>("Thông tin đơn thuốc", parameter);
    }

    //Deprecated
    //private void CreateNewPrescription()
    //{
    //    NavigationManager.NavigateTo("/prescription/create");
    //}

    private void UpdatePrescription(string id)
    {
        NavigationManager.NavigateTo("/prescription/update/" + id);
    }

    private async Task ShowDelete(string id)
    {
        var parameter = new DialogParameters { ["Id"] = id};
        var dialog = DialogService.Show<PresDeletePopUp>("Xóa đơn thuốc", parameter);
        var result = await dialog.Result;
        await InvokeAsync(OnInitializedAsync);
    }

    private async Task ShowPrint(Prescription prescription)
    {
        var parameter = new DialogParameters { ["Prescription"] = prescription };
        var dialog = DialogService.Show<PrescriptionPrint>("In đơn thuốc", parameter, new DialogOptions() { FullScreen = true, CloseButton = true });
        var result = await dialog.Result;
        if (!result.Canceled) await InvokeAsync(OnInitializedAsync);
    }

    private bool FilterS(Domain.Models.Prescription prescription) => FilterSearch(prescription, searchS);

    private bool FilterSearch(Domain.Models.Prescription prescription, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if (prescription.PrescriptionId.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true) return true;
        return false;
    }

    private async Task<Task> GetUserClaim()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity.IsAuthenticated)
        {
            userId = authState.User.Claims.Where(c => c.Type.Equals(ClaimTypes.NameIdentifier)).SingleOrDefault().Value;
            userRole = authState.User.Claims.Where(c => c.Type.Equals(ClaimTypes.Role)).SingleOrDefault().Value;
        }
        else NavigationManager.NavigateTo("/auth/login");
        return Task.CompletedTask;
    }
}
