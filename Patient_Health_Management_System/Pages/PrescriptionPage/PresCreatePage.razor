@page "/prescription/create"
@page "/prescription/create/{PatientId}"
@attribute [Authorize(Roles = "Doctor, Admin")]
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IPrescriptionService PrescriptionService
@inject IMedicineService MedicineService
@inject IPatientService PatientService
@inject IMapper mapper

<div style="display:flex">
    <div style="display:flex; flex-direction:column; width:40%">
        <div style="display:flex; background-color:#FAFAFA; border-radius:20px;">
            <div style="display:flex; flex:1; flex-direction:column; padding:16px 20px">
                <MudText Typo="Typo.h6">
                    <MudIcon Icon="@Icons.Material.Filled.Create" Class="mr-3 mb-n1" />
                    Thêm thông tin đơn thuốc
                </MudText>
                <MudAutocomplete T="string" Label="Bệnh nhân" @bind-Value="searchPatient" SearchFunc="@OnSearchPatient"
                    ResetValueOnEmptyText="true" MaxItems="null" />
                <MudTextField @bind-Value="@prescriptionForm.Note" Label="Ghi chú" ReadOnly="false" />
            </div>
        </div>
        <div style="display:flex; background-color:#FAFAFA; border-radius:20px; height:600px; margin-top:20px">
            <div style="display:flex; flex:1; flex-direction:column; padding:16px 20px; height:600px">
                <MudText Typo="Typo.h6" Style="padding-bottom:10px">Nhóm thuốc</MudText>
                <MudPaper Style="border-radius:20px; overflow:auto">
                    <MudList Clickable="true">
                        <MudListItem Text="Tất cả" OnClick="(e) => FilterByMedicineGroupName(null)" />
                        @foreach (var item in medicineGroups)
                        {
                            <MudListItem Text=@item.Name OnClick="(e) => FilterByMedicineGroupName(item.Name)" />
                        }
                    </MudList>
                </MudPaper>
            </div>
        </div>
    </div>

    <div style="display:flex; flex-direction:row; margin-left:20px">
        <div style="display:flex; height:845px; background-color:#FAFAFA; border-radius:20px">
            <div style="display:flex; flex:1; flex-direction:column; padding:16px 20px">
                <MudDataGrid T="Medicine" MultiSelection="true" Items="@medicinesTable" SortMode="SortMode.Multiple"
                    Filterable="true" QuickFilter="@FilterS" FixedHeader="true"
                    FilterCaseSensitivity="DataGridFilterCaseSensitivity.CaseInsensitive"
                    FilterMode="DataGridFilterMode.ColumnFilterMenu" Hideable="true" Striped="true" Bordered="true"
                    Style="border-radius:20px; width:690px" Height="700px" @bind-SelectedItems="@selectedMedicines">
                    <ToolBarContent>
                        <MudTextField @bind-Value="searchS" Placeholder="Tìm kiếm" Adornment="Adornment.Start"
                            Immediate="true" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"
                            Class="mt-0"></MudTextField>
                    </ToolBarContent>
                    <Columns>
                        <SelectColumn T="Medicine" />
                        <PropertyColumn Property="m => m.MedicineId" Title="Mã thuốc" Sortable="false"
                            Filterable="false" />
                        <PropertyColumn Property="m => m.Name" Title="Tên thuốc" />
                        <PropertyColumn Property="m => m.Unit" Title="Đơn vị" />
                        <PropertyColumn Property="m => m.HowToUse" Title="Cách dùng" />
                    </Columns>
                    <PagerContent>
                        <MudDataGridPager T="Medicine" />
                    </PagerContent>
                </MudDataGrid>
            </div>
        </div>

        <div style="display:flex; height:845px; background-color:#FAFAFA; border-radius:20px; margin:0px 20px">
            <div style="display:flex; flex:1; flex-direction:column; padding:16px 20px">
                <MudDataGrid Items="@selectedMedicines" ReadOnly="false" EditMode="DataGridEditMode.Cell" Height="760px"
                    Style="border-radius:20px; width:460px" FixedHeader="true" Hideable="true" Striped="true"
                    Bordered="true">
                    <Columns>
                        <PropertyColumn Property="m => m.MedicineId" Title="Mã thuốc" IsEditable="false" />
                        <PropertyColumn Property="m => m.Name" Title="Tên thuốc" IsEditable="false" />
                        <PropertyColumn Property="m => m.BuyingQuantity" Title="Số lượng" IsEditable="true" />
                        <PropertyColumn Property="m => m.SellingPrice" Title="Giá bán" IsEditable="false" />
                    </Columns>
                </MudDataGrid>
                @if (selectedMedicines.Any())
                {
                    disableButton = false;
                }
                else disableButton = true;
                <MudButton Style="margin-top:20px" Disabled="disableButton" Variant="Variant.Filled" Color="Color.Primary" OnClick="@(_ => Submit())">Lưu</MudButton>
            </div>
        </div>
    </div>


</div>

@code {
    private PrescriptionForm prescriptionForm = new PrescriptionForm();
    private IEnumerable<MedicineGroup> medicineGroups = new List<MedicineGroup>();
    private IEnumerable<Medicine> medicines = new List<Medicine>();
    private IEnumerable<Medicine> medicinesTable = new List<Medicine>();
    private IEnumerable<Patient> patients = new List<Patient>();
    private HashSet<Medicine> selectedMedicines = new HashSet<Medicine>();
    private string userId = string.Empty;
    private string searchS = string.Empty;
    private string searchPatient = string.Empty;
    private bool disableButton = true;

    [Parameter]
    public string? PatientId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        medicines = await MedicineService.GetMedicines();
        patients = await PatientService.GetPatients();
        medicineGroups = await MedicineService.GetMedicineGroups();
        medicinesTable = medicines;
        if(!String.IsNullOrEmpty(PatientId))
        {
            searchPatient = patients.Where(p => p.Id == PatientId).Select(p => p.Name).FirstOrDefault();
        }
        await GetUserId();
    }

    private async Task Submit()
    {
        var mapper = new MapperConfiguration(cfg => cfg.CreateMap<Medicine, MedicinePrescribed>()
        .ForMember(mp => mp.MedicineId, opt => opt.MapFrom(m => m.Id)))
        .CreateMapper();
        prescriptionForm.MedicinePrescribed = mapper.Map<List<MedicinePrescribed>>(selectedMedicines.ToList());
        prescriptionForm.PatientId = patients.Where(p => p.Name == searchPatient).Select(p => p.Id).FirstOrDefault();
        await PrescriptionService.CreatePrescription(prescriptionForm, userId);
        NavigationManager.NavigateTo("/prescription");
    }

    private async Task<IEnumerable<string>> OnSearchPatient(string inputSearch)
    {
        if (string.IsNullOrEmpty(inputSearch))
        {
            return patients.Select(d => d.Name);
        }
        await Task.Delay(0);
        return patients.Where(d => d.Name.Contains(inputSearch, StringComparison.InvariantCultureIgnoreCase) ||
        d.PatientId.Contains(inputSearch, StringComparison.InvariantCultureIgnoreCase))
        .Select(d => d.Name);
    }

    private void FilterByMedicineGroupName(string? medicineGroupName)
    {
        if (string.IsNullOrWhiteSpace(medicineGroupName)) medicinesTable = medicines;
        else medicinesTable = medicines.Where(m => m.GroupName == medicineGroupName);
    }

    private bool FilterS(Domain.Models.Medicine medicine) => FilterSearch(medicine, searchS);

    private bool FilterSearch(Domain.Models.Medicine medicine, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if (medicine.Name?.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true) return true;
        if (medicine.MedicineId?.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true) return true;
        if (medicine.HowToUse?.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true) return true;
        if (medicine.Unit?.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true) return true;
        return false;
    }

    private async Task GetUserId()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userClaim = authState.User.Claims;
        foreach (var item in userClaim)
        {
            if (item.Type == ClaimTypes.NameIdentifier)
            {
                userId = item.Value;
            }
        }
    }
}
