@page "/prescription/update/{Id}"
@attribute [Authorize(Roles = "Doctor")]
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IPrescriptionService PrescriptionService
@inject IMedicineService MedicineService
@inject IPatientService PatientService
@inject IMedicalExaminationService MedicalExaminationService
@inject IMapper mapper

<PageTitle>Chỉnh sửa đơn thuốc</PageTitle>

<AuthorizeView Context="contextAuthorize">
    <NotAuthorized>
        <MudText>Not Authorized</MudText>
    </NotAuthorized>
    <Authorized>
        <div style="display:flex">
            <div style="display:flex; flex-direction:column; width:40%">
                <div style="display:flex; background-color:#FAFAFA; border-radius:20px;">
                    <div style="display:flex; flex:1; flex-direction:column; padding:16px 20px">
                        <MudText Typo="Typo.h6">
                            <MudIcon Icon="@Icons.Material.Filled.Create" Class="mr-3 mb-n1" />
                            Thêm thông tin đơn thuốc
                        </MudText>
                        <MudTextField Value="@patient.Name" Label="Tên bệnh nhân" ReadOnly="true" />
                        <MudTextField Value="@medicalExamination.DiseaseName" Label="Chẩn đoán" ReadOnly="true" />
                        <MudTextField @bind-Value="@prescriptionForm.Note" Label="Ghi chú" ReadOnly="false"/>
                    </div>
                </div>
                <div style="display:flex; background-color:#FAFAFA; border-radius:20px; height:570px; margin-top:20px">
                    <div style="display:flex; flex:1; flex-direction:column; padding:16px 20px; height:570px">
                        <MudText Typo="Typo.h6" Style="padding-bottom:10px">Nhóm thuốc</MudText>
                        <MudPaper Style="border-radius:20px; overflow:auto">
                            <MudList Clickable="true">
                                <MudListItem Text="Tất cả" OnClick="(e) => FilterByMedicineGroupName(null)" />
                                @foreach (var item in medicineGroups)
                                {
                                    <MudListItem Text=@item.Name OnClick="(e) => FilterByMedicineGroupName(item.Name)" />
                                }
                            </MudList>
                        </MudPaper>
                    </div>
                </div>
            </div>

            <div style="display:flex; flex-direction:row; margin-left:20px">
                <div style="display:flex; height:815px; background-color:#FAFAFA; border-radius:20px">
                    <div style="display:flex; flex:1; flex-direction:column; padding:16px 20px">
                        <MudDataGrid T="Medicine" MultiSelection="true" Items="@medicinesTable" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@FilterS" FixedHeader="true"
                                     FilterCaseSensitivity="DataGridFilterCaseSensitivity.CaseInsensitive" FilterMode="DataGridFilterMode.ColumnFilterMenu"
                                     Hideable="true" Striped="true" Bordered="true" Style="border-radius:20px; width:690px" Height="670px" @bind-SelectedItems="@selectedMedicines">
                            <ToolBarContent>
                                <MudTextField @bind-Value="searchS" Placeholder="Tìm kiếm" Adornment="Adornment.Start" Immediate="true"
                                              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                            </ToolBarContent>
                            <Columns>
                                <SelectColumn T="Medicine" />
                                <PropertyColumn Property="m => m.MedicineId" Title="Mã thuốc"/>
                                <PropertyColumn Property="m => m.Name" Title="Tên thuốc" />
                                <PropertyColumn Property="m => m.Unit" Title="Đơn vị" />
                                <PropertyColumn Property="m => m.HowToUse" Title="Cách dùng" />
                                <PropertyColumn Property="m => m.SellingPrice" Title="Giá bán (vnđ)" />
                            </Columns>
                            <PagerContent>
                                <MudDataGridPager T="Medicine" />
                            </PagerContent>
                        </MudDataGrid>
                    </div>
                </div>

                <div style="display:flex; height:815px; background-color:#FAFAFA; border-radius:20px; margin:0px 20px">
                    <div style="display:flex; flex:1; flex-direction:column; padding:16px 20px">
                        <MudDataGrid Items="@selectedMedicines" ReadOnly="false" EditMode="DataGridEditMode.Cell" Height="730px"
                                     Style="border-radius:20px; width:460px" FixedHeader="true" Hideable="true" Striped="true" Bordered="true">
                            <Columns>
                                <PropertyColumn Property="sm => sm.MedicineId" Title="Mã thuốc" IsEditable="false">
                                    <FooterTemplate>
                                        <MudText Typo="Typo.body1" Style="font-weight:bold">
                                            Tổng tiền:
                                        </MudText>
                                    </FooterTemplate>
                                </PropertyColumn>
                                <PropertyColumn Property="sm => sm.Name" Title="Tên thuốc" IsEditable="false">
                                    <FooterTemplate>
                                        <MudText Typo="Typo.body1">
                                            @context.Items.Sum(sm => sm.SellingPrice * sm.BuyingQuantity) VNĐ
                                        </MudText>
                                    </FooterTemplate>
                                </PropertyColumn>
                                <PropertyColumn Property="sm => sm.BuyingQuantity" Title="Số lượng" IsEditable="true" />
                                <PropertyColumn Property="sm => sm.SellingPrice * sm.BuyingQuantity" Title="Thành tiền" IsEditable="false" />
                            </Columns>
                        </MudDataGrid>
                        @if (selectedMedicines.Any())
                        {
                            disableButton = false;
                        }
                        else disableButton = true;
                        <MudButton Style="margin-top:20px" Disabled="disableButton" Variant="Variant.Filled" Color="Color.Primary" OnClick="@(_ => Submit())">Lưu</MudButton>
                    </div>
                </div>
            </div>
        </div>
    </Authorized>
</AuthorizeView>

@code {

    private Prescription prescription = new Prescription();
    private PrescriptionForm prescriptionForm = new PrescriptionForm();
    private IEnumerable<MedicineGroup> medicineGroups = new List<MedicineGroup>();
    private IEnumerable<Medicine> medicines = new List<Medicine>();
    private IEnumerable<Medicine> medicinesTable = new List<Medicine>();
    private HashSet<Medicine> selectedMedicines = new HashSet<Medicine>();
    private Patient patient = new Patient();
    private MedicalExamination medicalExamination = new MedicalExamination();
    private string userId = string.Empty;
    private string searchS = string.Empty;
    private string searchPatient = string.Empty;
    private bool disableButton = true;
    
    [Parameter]
    public string Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        prescription = await PrescriptionService.GetPrescriptionById(Id);
        mapper = new MapperConfiguration(cfg => cfg.CreateMap<Prescription, PrescriptionForm>()).CreateMapper();
        prescriptionForm = mapper.Map<PrescriptionForm>(prescription);
        medicines = await MedicineService.GetMedicines();
        patient = await PatientService.GetPatientById(prescription.PatientId);
        medicalExamination = await MedicalExaminationService.GetMedicalExaminationById(prescription.MedicalExaminationId);
        medicineGroups = await MedicineService.GetMedicineGroups();
        medicinesTable = medicines;
        await GetUserId();
        GetSelectedMedicines();
    }

    private async Task Submit()
    {
        var mapper = new MapperConfiguration(cfg => cfg.CreateMap<Medicine, MedicinePrescribed>()
            .ForMember(mp => mp.MedicineId, opt => opt.MapFrom(m => m.Id)))
            .CreateMapper();
        prescriptionForm.MedicinePrescribed = mapper.Map<List<MedicinePrescribed>>(selectedMedicines.ToList());
        await PrescriptionService.UpdatePrescriptionById(Id, prescriptionForm, userId);
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        Snackbar.Add("Cập nhật đơn thuốc thành công!", Severity.Success);
        NavigationManager.NavigateTo("/prescription");
    }

    private void GetSelectedMedicines()
    {
        selectedMedicines = medicinesTable.Where(m => prescriptionForm.MedicinePrescribed.Select(mp => mp.MedicineId).Contains(m.Id)).ToHashSet();
        foreach (var item in selectedMedicines)
        {
            item.BuyingQuantity = prescriptionForm.MedicinePrescribed.Where(mp => mp.MedicineId == item.Id).FirstOrDefault().BuyingQuantity;
            item.SellingPrice = prescriptionForm.MedicinePrescribed.Where(mp => mp.MedicineId == item.Id).FirstOrDefault().SellingPrice;
        }
    }

    private void FilterByMedicineGroupName(string? medicineGroupName)
    {
        if (string.IsNullOrWhiteSpace(medicineGroupName)) medicinesTable = medicines;
        else medicinesTable = medicines.Where(m => m.GroupName == medicineGroupName);
    }

    private bool FilterS(Domain.Models.Medicine medicine) => FilterSearch(medicine, searchS);

    private bool FilterSearch(Domain.Models.Medicine medicine, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if (medicine.Name?.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true) return true;
        if (medicine.MedicineId?.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true) return true;
        if (medicine.HowToUse?.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true) return true;
        if (medicine.Unit?.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true) return true;
        return false;
    }

    private async Task GetUserId()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity.IsAuthenticated)
        {
            userId = authState.User.Claims
            .Where(c => c.Type.Equals(ClaimTypes.NameIdentifier))
            .SingleOrDefault().Value;
        }
        else NavigationManager.NavigateTo("/auth/login");
    }
}
