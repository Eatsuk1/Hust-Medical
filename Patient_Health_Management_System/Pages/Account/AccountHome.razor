@page "/account"
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ProtectedLocalStorage ProtectedLocalStorage
@inject IUserService UserService
@inject IDialogService DialogService
@layout MainLayout



<div class="d-flex" style="height:50rem; background-color:#FAFAFA; border-radius:20px; width:96.7%">
            <div style="display:flex; flex:1; flex-direction:column; padding-top:1rem; margin:0px 20px; width:96.7%">
                <MudText Typo="Typo.h6" Style="padding-bottom:10px">Quản lí tài khoản</MudText>
    <MudTextField Label="Name" Value="@user.Name" ReadOnly="true"></MudTextField>
    <MudTextField Label="Email" Value="@user.Email" ReadOnly="true"></MudTextField>
    <MudTextField Label="Phone" Value="@user.PhoneNumber" ReadOnly="true"></MudTextField>
    <MudTextField Label="Address" Value="@user.Address" ReadOnly="true"></MudTextField>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="() => ShowUpdate(user)">Chỉnh sửa</MudButton>  
</div>
</div>

@code{
    private string userId = new string("");

    private User user = new User();

    protected override async Task OnInitializedAsync()
    {
        await GetUserId();
        user = await UserService.GetUserByUserId(userId);
    }

    private async Task ShowUpdate(User user)
    {
        var parameter = new DialogParameters { ["User"] = user };
        var dialog = await DialogService.ShowAsync<AccountUpdatePopUp>("Chỉnh sửa thông tin tài khoản", parameter);
        var result = await dialog.Result;
        await InvokeAsync(OnInitializedAsync);
    }

    private async Task GetUserId()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userClaim = authState.User.Claims;
        foreach (var item in userClaim)
        {
            if (item.Type == ClaimTypes.NameIdentifier)
            {
                userId = item.Value;
            }
        }
    }
}