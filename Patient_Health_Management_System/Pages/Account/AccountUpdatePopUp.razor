@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ProtectedLocalStorage ProtectedLocalStorage
@inject IAccountService AccountService
@inject IUserService UserService

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3 mb-n1" />
            Sửa thông tin tài khoản
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @bind-IsValid="@success">
            <MudNumericField @bind-Value="@userForm.PhoneNumber" Label="Số điện thoại" HideSpinButtons="true" ReadOnly="false" Required="true" RequiredError="Số điện thoại không được bỏ trống" />
            <MudTextField @bind-Value="@userForm.Address" Label="Địa chỉ" ReadOnly="false" Required="true" RequiredError="Địa chỉ không được bỏ trống" />
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@(_ => MudDialog.Cancel())">Hủy</MudButton>
        <MudButton Variant="Variant.Filled" Disabled="@(!success)" Color="Color.Primary" OnClick="@(_ => Submit())">Lưu</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private UserForm userForm = new UserForm();

    private AccountForm accountForm = new AccountForm();

    private string userId = string.Empty;

    private bool success = false;

    [Parameter]
    public User UserParam { get; set; }

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    protected override async Task OnInitializedAsync()
    {
        userForm = new MapperConfiguration(cfg => cfg.CreateMap<User, UserForm>()).CreateMapper().Map<UserForm>(UserParam);
        await GetUserId();
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private async Task Submit()
    {
        accountForm = new MapperConfiguration(cfg => cfg.CreateMap<UserForm, AccountForm>()).CreateMapper().Map<AccountForm>(userForm);
        await UserService.UpdateUserByUserId(userForm, userId, "");
        var access_token = await ProtectedLocalStorage.GetAsync<string>("access_token");
        if (String.IsNullOrEmpty(access_token.Value) || AccountService.IsExpired(access_token.Value))
        {
            var newToken = await AccountService.TokenGenerator();
            await ProtectedLocalStorage.SetAsync("access_token", newToken.access_token);
            access_token = await ProtectedLocalStorage.GetAsync<string>("access_token");
        }
        await AccountService.UpdateUserNameById(userId, access_token.Value, accountForm.Name);
        MudDialog.Close(DialogResult.Ok(true));
    }

    private async Task GetUserId()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        userId = authState.User.Claims
        .Where(c => c.Type.Equals(ClaimTypes.NameIdentifier))
        .SingleOrDefault().Value;
    }

}