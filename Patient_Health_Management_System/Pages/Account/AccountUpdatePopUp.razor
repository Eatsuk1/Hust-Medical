@using RestSharp;
@using RestSharp.Authenticators;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ProtectedLocalStorage ProtectedLocalStorage
@inject AccountService AccountService
@inject IMapper Mapper

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3 mb-n1" />
            Sửa thông tin tài khoản
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudTextField @bind-Value="@userForm.Name" Label="Mã bệnh" ReadOnly="true" />
        <MudTextField @bind-Value="@userForm.Email" Label="Tên bệnh" ReadOnly="false" />
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Outlined" OnClick="@(_ => MudDialog.Cancel())">Hủy</MudButton>
        <MudButton Color="Color.Primary" OnClick="@(_ => Submit())">Lưu</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private UserForm userForm = new UserForm();

    private string userId = new string("");

    [Parameter]
    public UserResponse userResponse { get; set; }

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            Mapper = new MapperConfiguration(cfg => cfg.CreateMap<UserResponse, UserForm>()).CreateMapper();
            userForm = Mapper.Map<UserForm>(userResponse);
            await GetUserId();
            StateHasChanged();
        }
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private async Task Submit()
    {
        var access_token = await ProtectedLocalStorage.GetAsync<string>("access_token");
        await AccountService.UpdateUserById(userId, access_token.Value, userForm);
        MudDialog.Close(DialogResult.Ok(true));
    }

    private async Task GetUserId()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userClaim = authState.User.Claims;
        foreach (var item in userClaim)
        {
            if (item.Type == ClaimTypes.NameIdentifier)
            {
                userId = item.Value;
            }
        }
    }

}