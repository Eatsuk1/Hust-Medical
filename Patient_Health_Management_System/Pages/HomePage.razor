@page "/home"
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedLocalStorage ProtectedLocalStorage
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IAccountService AccountService
@inject IUserService UserService

<div style="display:flex; flex-direction:row">
    <div style="display:flex; flex-direction:column; width:70%">
        <div style="display:flex; flex-direction:column; height:100%">
        <MudImage Src="./assets/imgs/Stethoscope.jpg" Fluid="false" ObjectPosition="ObjectPosition.Right" ObjectFit="ObjectFit.Fill" 
        Style="background-color:#FAFAFA; border-radius:24px; width:60%; height:50%; position:absolute" />
        <MudText Typo="Typo.h5" Style="position: relative; top: 80px; left: 50px; color: #FAF3FF;">@dayTime</MudText>
        <MudText Typo="Typo.h2" Style="position: relative; top: 90px; left: 50px; color: #FAF3FF; font-weight:400">@userName</MudText>
        <MudText Typo="Typo.h6" Style="position: relative; top: 210px; left: 50px; color: #FAF3FF;">Quote trong ngày</MudText>
        <MudText Typo="Typo.body1" Style="position: relative; top: 220px; left: 50px; width: 45%; color: #FAF3FF;">One positive command he gave us: You shall love and honor your emperor. In every congregation a prayer must be said for the czar's health, or the chief of police would close the synagogue.</MudText>
		</div>

        <div style="display:flex; background-color:#FAFAFA; border-radius:20px;">
            <div style="display:flex; flex:1; flex-direction:row; justify-content:space-evenly; padding:16px 20px; width:20%">
                <MudChart ChartType="ChartType.Donut" LegendPosition="@Position.Right" Width="300px" Height="300px"
                          InputData="@data1" InputLabels="@labels1">
                    <CustomGraphics>
                        <text class="donut-inner-text" x="50%" y="40%" dominant-baseline="middle" text-anchor="middle" fill="black" font-family="Helvetica" font-size="2">Tổng số bệnh nhân</text>
                        <text class="donut-inner-text" x="47%" y="55%" dominant-baseline="middle" text-anchor="middle" fill="black" font-family="Helvetica" font-size="5">@data.Sum().ToString()</text>
                    </CustomGraphics>
                </MudChart>
                <MudChart ChartType="ChartType.Donut" LegendPosition="@Position.Right" Width="300px" Height="300px"
                          InputData="@data" InputLabels="@labels">
                    <CustomGraphics>
                        <text class="donut-inner-text" x="50%" y="40%" dominant-baseline="middle" text-anchor="middle" fill="black" font-family="Helvetica" font-size="2">Tổng số bệnh nhân</text>
                        <text class="donut-inner-text" x="47%" y="55%" dominant-baseline="middle" text-anchor="middle" fill="black" font-family="Helvetica" font-size="5">@data.Sum().ToString()</text>
                    </CustomGraphics>
                </MudChart>
            </div>
        </div>
    </div>
	<div style="display:flex; height:52rem; background-color:#FAFAFA; border-radius:20px; margin-left:40px; width:22%">
            <div style="display:flex; flex:1; flex-direction:column; padding:16px 20px; width:20%">
			<MudDatePicker PickerVariant="PickerVariant.Static" Date="@(DateTime.Today)" />
            <MudPaper Style="display:flex; flex-wrap:wrap; flex-direction:column; justify-content:center; align-content:center; height:50%; margin-top:15px; border-radius:24px ">
                <MudText Typo="Typo.h5">Không có lịch hẹn nào</MudText>
            </MudPaper>
            </div>
    </div>
</div>
@code{
    private string dayTime = new string("");

    private string userName = new string("");

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var access_token = await ProtectedLocalStorage.GetAsync<string>("access_token");
            if (String.IsNullOrEmpty(access_token.Value) || AccountService.IsExpired(access_token.Value))
            {
                var auth0Token = await AccountService.TokenGenerator();
                await ProtectedLocalStorage.SetAsync("access_token", auth0Token.access_token);
                await OnAfterRenderAsync(firstRender);
            }
            SetDayTime();
            await GetUserName();
            StateHasChanged();
        }
    }

    private void SetDayTime()
    {
        if(DateTime.Now.Hour >= 0 && DateTime.Now.Hour < 12)
        {
            dayTime = "Chào buổi sáng";
        }
        else if (DateTime.Now.Hour >= 12 && DateTime.Now.Hour < 18)
        {
            dayTime = "Chào buổi chiều";
        }
        else
        {
            dayTime = "Chào buổi tối";
        }
    }

    private async Task GetUserName()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userId = authState.User.Claims
        .Where(c => c.Type.Equals(ClaimTypes.NameIdentifier))
        .SingleOrDefault().Value;
        userName = await UserService.GetUserNameByUserId(userId);
    }

    //example Chart
    public static double[] data1 = { 20.0, 80.0 };
    public string[] labels1 = { $"Đang điều trị ({data1[0]}%)", $"Đã xuất viện ({data1[1]}%)" };

    public static double[] data = { 60.0, 40.0 };
    public string[] labels = { $"Nam ({data[0]}%)", $"Nữ ({data[1]}%)" };
}
