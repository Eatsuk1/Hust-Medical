@page "/patient"
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IPatientService PatientService
@inject IDialogService DialogService
@layout MainLayout

<AuthorizeView Context="contextAuthorize">
    <NotAuthorized>
        <MudText>Not Authorized</MudText>
    </NotAuthorized>
    <Authorized>
        <MudPaper Style="overflow:hidden; position:relative; margin-left:56px">
            <MudTable Items="@patients" Hover="true" Bordered="true" Striped="true"
                      Filter="new Func<Domain.Models.Patient, bool>(FilterS)" Breakpoint="Breakpoint.Sm" SortLabel="Sort By">

                <ToolBarContent>
                    <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="() => ShowAdd()">Thêm</MudButton>
                    <MudSpacer />
                    <MudTextField Immediate="true" @bind-Value="searchS" T="string" Placeholder="Search"
                                  Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"
                                  Class="mt-0"></MudTextField>
                </ToolBarContent>

                <HeaderContent>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<Domain.Models.Patient, object>(x=>x.PatientId)">
                            Mã bệnh nhân
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<Domain.Models.Patient, object>(x=>x.Name)">Tên bệnh nhân</MudTableSortLabel>
                    </MudTh>
                    <MudTh>Chức năng</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Mã bệnh nhân">@context.PatientId</MudTd>
                    <MudTd DataLabel="Tên bệnh nhân">@context.Name</MudTd>
                    <MudTd>
                        <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" Size="Size.Medium"
                                       OnClick="(e) => ShowUpdate(context.Id)" />
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Medium"
                                       OnClick="(e) => ShowDelete(context.Id, context.Name)" />
                        <MudIconButton Icon="@Icons.Material.Filled.Info" Color="Color.Info" Size="Size.Medium" OnClick="(e) => ShowDetail(context.Id)" />
                    </MudTd>
                </RowTemplate>

                <PagerContent>
                    <MudTablePager />
                </PagerContent>

                <NoRecordsContent>
                    <MudText>Không tìm thấy dữ liệu</MudText>
                </NoRecordsContent>

                <LoadingContent>
                    <MudText>Loading...</MudText>
                </LoadingContent>

                <PagerContent>
                    <MudTablePager />
                </PagerContent>
            </MudTable>
        </MudPaper>
    </Authorized>
</AuthorizeView>


@code {
    private IEnumerable<Domain.Models.Patient> patients = new List<Domain.Models.Patient>();
    private string searchS = "";

    protected override async Task OnInitializedAsync()
    {
        patients = await PatientService.GetPatients();
    }

    private async Task ShowDetail(string Id)
    {
        var parameter = new DialogParameters { ["Id"] = Id };
        var dialog = await DialogService.ShowAsync<PatientDetailPopUp>("Thông tin bệnh nhân", parameter);
        var result = await dialog.Result;
    }

    private async Task ShowAdd()
    {
        var dialog = DialogService.Show<PatientCreatePopUp>("Thêm bệnh nhân");
        var result = await dialog.Result;
        await InvokeAsync(OnInitializedAsync);
    }

    private async Task ShowUpdate(string id)
    {
        var parameter = new DialogParameters { ["Id"] = id };
        var dialog = DialogService.Show<PatientUpdatePopUp>("Sửa thông tin bệnh nhân", parameter);
        var result = await dialog.Result;
        await InvokeAsync(OnInitializedAsync);
    }

    private async Task ShowDelete(string id, string name)
    {
        var parameter = new DialogParameters { ["Id"] = id, ["name"] = name };
        var dialog = DialogService.Show<PatientDeletePopUp>("Xóa bệnh nhân", parameter);
        var result = await dialog.Result;
        await InvokeAsync(OnInitializedAsync);
    }

    private bool FilterS(Domain.Models.Patient patient) => FilterSearch(patient, searchS);

    private bool FilterSearch(Domain.Models.Patient patient, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if (patient.Name?.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true) return true;
        if (patient.PatientId?.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true) return true;
        return false;
    }
}
