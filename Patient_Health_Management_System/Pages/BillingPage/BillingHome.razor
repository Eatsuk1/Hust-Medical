@page "/billing"
@attribute [Authorize(Roles = "Cashier, Admin")]
@using Append.Blazor.Printing
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IBillingService BillingService
@inject IPatientService PatientService
@inject IDialogService DialogService
@inject IPrintingService PrintingService
@inject NavigationManager NavigationManager

<AuthorizeView Context="contextAuthorize">
    <NotAuthorized>
        <MudText>Not Authorized</MudText>
    </NotAuthorized>
    <Authorized>
        <div class="d-flex" style="height:50rem; background-color:#FAFAFA; border-radius:20px; width:96.7%">
            <div style="display:flex; flex:1; flex-direction:column; padding-top:1rem; margin:0px 20px; width:96.7%">
                <MudText Typo="Typo.h6" Style="padding-bottom:10px">Danh sách hoá đơn</MudText>

                <MudDataGrid T="Billing" MultiSelection="true" Items="@billings" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@FilterS" FixedHeader="true"
                             FilterCaseSensitivity="DataGridFilterCaseSensitivity.CaseInsensitive" FilterMode="DataGridFilterMode.ColumnFilterMenu"
                             Hideable="true" Striped="true" Bordered="true" Style="overflow:auto; position:relative; width:100%; border-radius:20px;" Height="600px">
                    <ToolBarContent>
                        <MudSpacer />
                        <MudTextField @bind-Value="searchS" Placeholder="Tìm kiếm hoá đơn" Adornment="Adornment.Start" Immediate="true"
                                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    </ToolBarContent>
                    <Columns>
                        <SelectColumn T="Billing" />
                        <PropertyColumn Property="b=> b.BillId" Title="Mã đơn khám" Sortable="false" Filterable="false" />
                        <PropertyColumn Property="b=> patients.Where(p => p.Id.Equals(b.PatientId)).FirstOrDefault().PatientId" Title="Mã bệnh nhân" Sortable="false" Filterable="false" />
                        <PropertyColumn Property="b=> patients.Where(p => p.Id.Equals(b.PatientId)).FirstOrDefault().Name" Title="Tên bệnh nhân" />
                        <PropertyColumn Property="b=> b.CreatedAt.ToLocalTime().ToString(dateTimeFormat)" Title="Thời gian tạo đơn" />
                        <TemplateColumn Sortable="false" Filterable="false" Title="Tình trạng thanh toán">
                            <CellTemplate>
                                <MudChip Variant="Variant.Filled" Color="context.Item.IsPaid ? Color.Success : Color.Error">
                                    @(context.Item.IsPaid ? "Đã thanh toán" : "Chưa thanh toán")
                                </MudChip>
                            </CellTemplate>
                        </TemplateColumn>
                        <TemplateColumn Sortable="false" Filterable="false" Title="Chức năng">
                            <CellTemplate>
                                <MudStack Row>
                                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" Size="Size.Medium"
                                                   OnClick="(e) => ShowUpdate(context.Item)" />
                                    <MudIconButton Icon="@Icons.Material.Filled.Print" Color="Color.Surface" Size="Size.Medium"
                                                   OnClick="(e) => ShowPrint(context.Item)" />
                                    @*<MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Medium"
                                                   OnClick="(e) => ShowDelete(context.Item.Id)" />
                                    <MudIconButton Icon="@Icons.Material.Filled.Info" Color="Color.Info" Size="Size.Medium"
                                                   OnClick="(e) => ShowDetail(context.Item.Id)" /> *@
                                </MudStack>
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>
                    <NoRecordsContent>
                        <MudText>Không tìm thấy dữ liệu</MudText>
                    </NoRecordsContent>

                    <LoadingContent>
                        <MudText>Loading...</MudText>
                    </LoadingContent>
                    <PagerContent>
                        <MudDataGridPager T="Billing" />
                    </PagerContent>
                </MudDataGrid>
            </div>
        </div>  
    </Authorized>
</AuthorizeView>

@code {
    private IEnumerable<Billing> billings = new List<Billing>();
    private IEnumerable<Patient> patients = new List<Patient>();
    private string searchS = string.Empty;
    private string userId = string.Empty;
    private string dateTimeFormat = "dd/MM/yyyy";

    protected override async Task OnInitializedAsync()
    {
        await GetUserId();
        var autoRefreshUI = new Timer((_) =>
        {
            InvokeAsync(async () =>
            {
                billings = await BillingService.GetBillings();
                patients = await PatientService.GetPatients();
                StateHasChanged();
            });
        }, null, 0, 10000);
    }

    private async Task ShowUpdate(Billing billing)
    {
        var parameter = new DialogParameters { ["Bill"] = billing, ["UserId"] = userId };
        var dialog = DialogService.Show<BillingUpdatePopUp>("Cập nhật hoá đơn", parameter);
        var result = await dialog.Result;
        if (!result.Canceled) await InvokeAsync(OnInitializedAsync);
    }

    private async Task ShowPrint(Billing billing)
    {
        var parameter = new DialogParameters { ["Bill"] = billing};
        var dialog = DialogService.Show<BillingPrint>("In hoá đơn", parameter, new DialogOptions(){ FullScreen = true, CloseButton = true });
        var result = await dialog.Result;
        if (!result.Canceled) await InvokeAsync(OnInitializedAsync);
    }

    private bool FilterS(Billing billing) => FilterSearch(billing, searchS);

    private bool FilterSearch(Billing billing, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (billing.BillId.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (patients.Any(p => p.PatientId.Contains(searchString, StringComparison.OrdinalIgnoreCase)))
            return true;
        if (patients.Any(p => p.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase)))
            return true;
        return false;
    }

    private async Task GetUserId()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        userId = authState.User.Claims
        .Where(c => c.Type.Equals(ClaimTypes.NameIdentifier))
        .SingleOrDefault().Value;
    }
}
