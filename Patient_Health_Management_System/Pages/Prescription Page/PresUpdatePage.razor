@page "/prescription/update/{Id}"
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IPrescriptionService PrescriptionService
@inject IMedicineService MedicineService
@inject IPatientService PatientService
@inject IMapper mapper

<MudPaper Style="overflow:hidden; position:relative; margin-top:60px">
    <MudText Typo="Typo.h6">
        <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3 mb-n1" />
        Sửa thông tin đơn thuốc
    </MudText>

    <MudTextField @bind-Value="@prescriptionForm.PrescriptionId" Label="Mã đơn thuốc" ReadOnly="false" />
    <MudAutocomplete T="string" Label="Bệnh nhân" @bind-Value="searchPatient"
               SearchFunc="@OnSearchPatient" ResetValueOnEmptyText="true" MaxItems="null" />
    <MudTextField @bind-Value="@prescriptionForm.Note" Label="Ghi chú" ReadOnly="false" />

    <MudDataGrid T="Medicine" MultiSelection="true" Items="@medicines" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@FilterS"
    Hideable="true" @bind-SelectedItems="@selectedMedicines">
    <ToolBarContent>
        <MudTextField @bind-Value="searchS" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
            AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <SelectColumn T="Medicine" />
        <PropertyColumn Property="m => m.MedicineId" Title="Mã thuốc" Sortable="false" Filterable="false" />
        <PropertyColumn Property="m => m.Name" Title="Tên thuốc" />
        <PropertyColumn Property="m => m.Unit" Title="Đơn vị"/>
        <PropertyColumn Property="m => m.HowToUse" Title="Cách dùng"/>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="Medicine" />
    </PagerContent>
    </MudDataGrid>

    <MudDataGrid Items="@selectedMedicines">
        <Columns>
            <PropertyColumn Property="m => m.MedicineId" Title="Mã thuốc" />
            <PropertyColumn Property="m => m.Name" Title="Tên thuốc" />
            <PropertyColumn Property="m => m.BuyingQuantity" Title="Số lượng" />
            <PropertyColumn Property="m => m.SellingPrice" Title="Giá bán" IsEditable="true" />
        </Columns>
    </MudDataGrid>

    <MudExpansionPanel IsExpanded="true" HideIcon="true">
        <TitleContent>
            <MudText>Nhóm thuốc</MudText>
        </TitleContent>
        <ChildContent>
            <MudList Clickable="true">
                <MudListItem Text="Tất cả" OnClick="(e) => FilterByMedicineGroupName(null)" />
                @foreach (var item in medicineGroups)
                {
                    <MudListItem Text=@item.Name OnClick="(e) => FilterByMedicineGroupName(item.Name)" />
                }
            </MudList>
        </ChildContent>
    </MudExpansionPanel>
    <MudButton Color="Color.Primary" OnClick="@(_ => Submit())">Lưu</MudButton>
</MudPaper>

@code {

    [Parameter]
    public string Id { get; set; }
    private Prescription prescription = new Prescription();
    private PrescriptionForm prescriptionForm = new PrescriptionForm();
    private IEnumerable<MedicineGroup> medicineGroups = new List<MedicineGroup>();
    private IEnumerable<Medicine> medicines = new List<Medicine>();
    private IEnumerable<Patient> patients = new List<Patient>();
    private HashSet<Medicine> selectedMedicines = new HashSet<Medicine>();
    private string userId = new string("");
    private string searchS = new string("");
    private string searchPatient = new string("");

    protected override async Task OnInitializedAsync()
    {
        prescription = await PrescriptionService.GetPrescriptionById(Id);
        mapper = new MapperConfiguration(cfg => cfg.CreateMap<Prescription, PrescriptionForm>()).CreateMapper();
        prescriptionForm = mapper.Map<PrescriptionForm>(prescription);
        medicines = await MedicineService.GetMedicines();
        patients = await PatientService.GetPatients();
        medicineGroups = await MedicineService.GetMedicineGroups();
        await GetUserId();
        GetPatientName();
        GetSelectedMedicines();
    }

    private async Task Submit()
    {
        prescriptionForm.MedicinePrescribed = new MapperConfiguration(cfg => cfg.CreateMap<Medicine, MedicinePrescribed>()).CreateMapper()
                                                                                                                           .Map<List<MedicinePrescribed>>(selectedMedicines.ToList());
        prescriptionForm.PatientId = patients.Where(p => p.Name == searchPatient).Select(p => p.Id).FirstOrDefault();
        await PrescriptionService.UpdatePrescriptionById(Id, prescriptionForm, userId);
        NavigationManager.NavigateTo("/prescription");
    }

    private async Task<IEnumerable<string>> OnSearchPatient(string searchPatient)
    {
        if (string.IsNullOrEmpty(searchPatient))
        {
            return patients.Select(d => d.Name);
        }
        return patients.Where(d => d.Name.Contains(searchPatient, StringComparison.InvariantCultureIgnoreCase) ||
                                   d.PatientId.Contains(searchPatient, StringComparison.InvariantCultureIgnoreCase))
                       .Select(d => d.Name);
    }

    private void GetPatientName()
    {
        searchPatient = patients.Where(p => p.Id == prescriptionForm.PatientId).FirstOrDefault().Name;
    }

    private void GetSelectedMedicines()
    {
        selectedMedicines = medicines.Where(m => prescriptionForm.MedicinePrescribed.Select(mp => mp.MedicineId).Contains(m.Id)).ToHashSet();
    }

    private async Task FilterByMedicineGroupName(string? medicineGroupName)
    {
        if (string.IsNullOrWhiteSpace(medicineGroupName)) medicines = await MedicineService.GetMedicines();
        else medicines = await MedicineService.GetMedicineByGroupName(medicineGroupName);
        await InvokeAsync(StateHasChanged);
    }

    private bool FilterS(Domain.Models.Medicine medicine) => FilterSearch(medicine, searchS);

    private bool FilterSearch(Domain.Models.Medicine medicine, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if (medicine.Name?.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true) return true;
        if (medicine.MedicineId?.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true) return true;
        if (medicine.HowToUse?.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true) return true;
        if (medicine.Unit?.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true) return true;
        return false;
    }

    private async Task GetUserId()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userClaim = authState.User.Claims;
        foreach (var item in userClaim)
        {
            if (item.Type == ClaimTypes.NameIdentifier)
            {
                userId = item.Value;
            }
        }
    }
}
