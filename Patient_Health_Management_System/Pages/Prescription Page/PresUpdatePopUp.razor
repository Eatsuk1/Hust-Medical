@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IPrescriptionService prescriptionService

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Create" Class="mr-3 mb-n1" />
            Thêm thông tin đơn thuốc
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudTextField @bind-Value="@prescriptionForm.PrescriptionId" Label="Mã đơn thuốc" ReadOnly="false" />
        <MudTextField @bind-Value="@prescriptionForm.PatientId" Label="Mã bệnh nhân" ReadOnly="false" />
        <MudTextField @bind-Value="@prescriptionForm.Note" Label="Ghi chú" ReadOnly="false" />
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Outlined" OnClick="@(_ => MudDialog.Cancel())">Hủy</MudButton>
        <MudButton Color="Color.Primary" OnClick="@(_ => Submit())">Lưu</MudButton>
    </DialogActions>
</MudDialog>


@code {
    private PrescriptionForm prescriptionForm = new Domain.Forms.PrescriptionForm();
    private string userId = new string("");

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public string Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetUserId();
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private async Task Submit()
    {
        await prescriptionService.CreatePrescription(prescriptionForm, userId);
        MudDialog.Close(DialogResult.Ok(true));
    }

    private async Task GetUserId()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userClaim = authState.User.Claims;
        foreach (var item in userClaim)
        {
            if (item.Type == ClaimTypes.NameIdentifier)
            {
                userId = item.Value;
            }
        }
    }
}
