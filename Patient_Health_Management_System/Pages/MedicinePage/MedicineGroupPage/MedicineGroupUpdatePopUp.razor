@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IMedicineService MedicineService
@inject IMapper mapper

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Create" Class="mr-3 mb-n1" />
            Chỉnh sửa tên nhóm thuốc
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudTextField @bind-Value="@medicineGroupForm.Name" Label="Tên nhóm thuốc" ReadOnly="false" />
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Outlined" OnClick="@(_ => MudDialog.Cancel())">Hủy</MudButton>
        <MudButton Color="Color.Primary" OnClick="@(_ => Submit())">Lưu</MudButton>
    </DialogActions>
</MudDialog>


@code {
    private MedicineGroupForm medicineGroupForm = new MedicineGroupForm();

    private string userId = new string("");

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public string Id { get; set; }

    [Parameter]
    public string MedicineGroupName { get; set; }

    protected override async Task OnInitializedAsync()
    {
        medicineGroupForm.Name = MedicineGroupName;
        await GetUserId();
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private async Task Submit()
    {
        await MedicineService.UpdateMedicineGroupById(Id, medicineGroupForm, userId);
        MudDialog.Close(DialogResult.Ok(true));
    }

    private async Task GetUserId()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        userId = authState.User.Claims
        .Where(c => c.Type.Equals(ClaimTypes.Role))
        .SingleOrDefault().Value;
    }
}
