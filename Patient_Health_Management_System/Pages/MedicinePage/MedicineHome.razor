@page "/medicine"
@attribute [Authorize(Roles = "Doctor, Admin")]
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IMedicineService MedicineService
@inject IDialogService DialogService
@layout MainLayout



<AuthorizeView Context="contextAuthorize">
    <NotAuthorized>
        <MudText>Not Authorized</MudText>
    </NotAuthorized>
    <Authorized>
    <div class="d-flex">
        <div style="display:flex; height:50rem; background-color:#FAFAFA; border-radius:20px; width:73%">
            <div style="display:flex; flex:1; flex-direction:column; padding-top:1rem; margin:0px 20px; width:73%">
            <MudText Typo="Typo.h6" Style="padding-bottom:10px">Danh sách thuốc</MudText>

                    <MudDataGrid T="Medicine" MultiSelection="true" Items="@medicines" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@FilterS" FixedHeader="true"
                                 FilterCaseSensitivity="DataGridFilterCaseSensitivity.CaseInsensitive" FilterMode="DataGridFilterMode.ColumnFilterMenu"
                                 Hideable="true" Striped="true" Bordered="true" Style="overflow:auto; position:relative; width:100%; border-radius:20px;" Height="600px">
                        <ToolBarContent>
                            <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="() => ShowMedicineCreate()">Thêm thuốc mới</MudButton>
                            <MudSpacer />
                            <MudTextField @bind-Value="searchS" Placeholder="Tìm kiếm thuốc" Adornment="Adornment.Start" Immediate="true"
                                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                        </ToolBarContent>
                        <Columns>
                            <SelectColumn T="Medicine" />
                            <PropertyColumn Property="m => m.MedicineId" Title="Mã thuốc" Sortable="false" Filterable="false" />
                            <PropertyColumn Property="m => m.Name" Title="Tên thuốc" />
                            <PropertyColumn Property="m => m.GroupName" Title="Nhóm thuốc" />
                            <PropertyColumn Property="m => m.Unit" Title="Đơn vị" />
                            <PropertyColumn Property="m => m.SellingPrice" Title="Giá bán (vnđ)"/>
                            <PropertyColumn Property="m => m.HowToUse" Title="Cách dùng" />
                            <TemplateColumn Sortable="false" Filterable="false" Title="Chức năng">
                                <CellTemplate>
                                    <MudStack Row>
                                        <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" Size="Size.Medium"
                                                   OnClick="(e) => ShowMedicineUpdate(context.Item.Id)" />
                                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Medium"
                                                   OnClick="(e) => ShowMedicineDelete(context.Item.Id)" />
                                        <MudIconButton Icon="@Icons.Material.Filled.Info" Color="Color.Info" Size="Size.Medium"
                                                       OnClick="(e) => ShowMedicineDetail(context.Item.Id)" />
                                    </MudStack>
                                </CellTemplate>
                            </TemplateColumn>
                        </Columns>
                        <NoRecordsContent>
                            <MudText>Không tìm thấy dữ liệu</MudText>
                        </NoRecordsContent>

                        <LoadingContent>
                            <MudText>Loading...</MudText>
                        </LoadingContent>
                        <PagerContent>
                            <MudDataGridPager T="Medicine" />
                        </PagerContent>
                    </MudDataGrid>
            </div>
        </div>

        <div style="display:flex; height:50rem; background-color:#FAFAFA; border-radius:20px; margin-left:45px; width:21%">
            <div style="display:flex; flex:1; flex-direction:column; padding-top:1rem; margin:0px 20px; width:21%">
            <MudText Typo="Typo.h6" Style="padding-bottom:10px">Nhóm thuốc</MudText>

                <MudTable Elevation="2" T="MedicineGroup" Items="@medicineGroups" Bordered="true" Striped="true" FixedHeader="true"
                          SortLabel="Sort By" @ref="medicineGroupTable"
                          Style="overflow:auto; position:relative; border-radius:20px;" Height="650px">
                    <ToolBarContent>
                        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="() => ShowMedicineGroupCreate()">Thêm</MudButton>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh>Tên nhóm</MudTh>
                        <MudTh>Chức năng</MudTh>
                    </HeaderContent>
                    <RowTemplate >
                        <MudTd DataLabel="Tên nhóm">@context.Name</MudTd>
                        <MudTd>
                            <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" Size="Size.Medium"
                                               OnClick="(e) => ShowMedicineGroupUpdate(context.Id, context.Name)" />
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Medium"
                                           OnClick="(e) => ShowMedicineGroupDelete(context.Id, context.Name)" />
                        </MudTd>
                    </RowTemplate>

                    <NoRecordsContent>
                        <MudText>Không tìm thấy dữ liệu</MudText>
                    </NoRecordsContent>

                    <LoadingContent>
                        <MudText>Loading...</MudText>
                    </LoadingContent>
                </MudTable>
            </div>
        </div>
    </div>

    </Authorized>
</AuthorizeView>

@code {
    private IEnumerable<Medicine> medicines = new List<Medicine>();

    private IEnumerable<MedicineGroup> medicineGroups = new List<MedicineGroup>();

    private MudTable<MedicineGroup> medicineGroupTable;

    private string searchS = new string("");

    protected override async Task OnInitializedAsync()
    {
        medicines = await MedicineService.GetMedicines();
        medicineGroups = await MedicineService.GetMedicineGroups();
    }

    #region Medicine Pop Up
    private async Task ShowMedicineDetail(string Id)
    {
        var parameter = new DialogParameters { ["Id"] = Id };
        var dialog = await DialogService.ShowAsync<MedicineDetailPopUp>("Thông tin thuốc", parameter);
        var result = await dialog.Result;
    }

    private async Task ShowMedicineCreate()
    {
        var parameter = new DialogParameters { ["MedicineGroups"] = medicineGroups };
        var dialog = await DialogService.ShowAsync<MedicineCreatePopUp>("Thêm thông tin thuốc", parameter);
        var result = await dialog.Result;
        if(!result.Canceled) await InvokeAsync(OnInitializedAsync);
    }

    private async Task ShowMedicineUpdate(string id)
    {
        var parameter = new DialogParameters { ["Id"] = id, ["MedicineGroups"] = medicineGroups };
        var dialog = await DialogService.ShowAsync<MedicineUpdatePopUp>("Chỉnh sửa thông tin thuốc", parameter);
        var result = await dialog.Result;
        if(!result.Canceled) await InvokeAsync(OnInitializedAsync);
    }

    private async Task ShowMedicineDelete(string id)
    {
        var parameter = new DialogParameters { ["Id"] = id };
        var dialog = await DialogService.ShowAsync<MedicineDeletePopUp>("Xóa thông tin thuốc", parameter);
        var result = await dialog.Result;
        if(!result.Canceled) await InvokeAsync(OnInitializedAsync);
    }
    #endregion

    #region Medicine Group Pop Up
    private async Task ShowMedicineGroupCreate()
    {
        var dialog = await DialogService.ShowAsync<MedicineGroupPage.MedicineGroupCreatePopUp>("Thêm nhóm thuốc");
        var result = await dialog.Result;
        if (!result.Canceled) if(!result.Canceled) await InvokeAsync(OnInitializedAsync);
    }

    private async Task ShowMedicineGroupUpdate(string id, string medicineGroupName)
    {
        var parameter = new DialogParameters { ["Id"] = id, ["MedicineGroupName"] = medicineGroupName };
        var dialog = await DialogService.ShowAsync<MedicineGroupPage.MedicineGroupUpdatePopUp>("Chỉnh sửa tên nhóm thuốc", parameter);
        var result = await dialog.Result;
        if(!result.Canceled) await InvokeAsync(OnInitializedAsync);
    }

    private async Task ShowMedicineGroupDelete(string id, string medicineGroupName)
    {
        var parameter = new DialogParameters { ["Id"] = id, ["MedicineGroupName"] = medicineGroupName };
        var dialog = await DialogService.ShowAsync<MedicineGroupPage.MedicineGroupDeletePopUp>("Xóa nhóm thuốc", parameter);
        var result = await dialog.Result;
        if(!result.Canceled) await InvokeAsync(OnInitializedAsync);
    }
    #endregion

    #region Filter
    private bool FilterS(Domain.Models.Medicine medicine) => FilterSearch(medicine, searchS);

    private bool FilterSearch(Domain.Models.Medicine medicine, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if (medicine.Name?.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true) return true;
        if (medicine.MedicineId?.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true) return true;
        if (medicine.HowToUse?.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true) return true;
        if (medicine.Unit?.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true) return true;
        if (medicine.SellingPrice.ToString().Equals(searchString) == true) return true;
        if (medicine.GroupName?.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true) return true;
        return false;
    }
    #endregion

    #region Deprecated Function

    //private void FilterByMedicineGroupName(string? medicineGroupName)
    //{
    //    if (string.IsNullOrWhiteSpace(medicineGroupName)) medicinesForTable = medicines.ToList();
    //    else medicinesForTable = medicines.Where(x => x.GroupName.Equals(medicineGroupName)).ToList();
    //}

    //private void RowClickEvent(TableRowClickEventArgs<MedicineGroup> tableRowClickEventArgs){}

    //private string SelectedRowClassFunc(MedicineGroup element, int rowNumber)
    //{
    //    if (selectedRowMedicineGroupNumber == rowNumber)
    //    {
    //        selectedRowMedicineGroupNumber = -1;
    //        searchS = "";
    //        return string.Empty;
    //    }
    //    else if (medicineGroupTable.SelectedItem != null && medicineGroupTable.SelectedItem.Equals(element))
    //    {
    //        selectedRowMedicineGroupNumber = rowNumber;
    //        searchS = medicineGroupTable.SelectedItem.Name;
    //        return "selected";
    //    }
    //    else return string.Empty;
    //}
    #endregion
}

