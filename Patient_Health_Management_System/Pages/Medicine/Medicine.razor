@page "/medicine"
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IMedicineService MedicineService
@inject IDialogService DialogService
@layout MainLayout

<AuthorizeView Context="contextAuthorize">
    <NotAuthorized>
        <MudText>Not Authorized</MudText>
    </NotAuthorized>
    <Authorized>
<MudPaper Style="overflow:hidden; position:relative; margin-left:56px">

    <MudTable Items="@medicines" Hover="true" Bordered="true" Striped="true" Filter="new Func<Models.Medicine, bool>(FilterS)" Breakpoint="Breakpoint.Sm" SortLabel="Sort By">

        <ToolBarContent>
            <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="() => ShowAdd()">Thêm</MudButton>
            <MudSpacer />
            <MudTextField Immediate="true" @bind-Value="searchS" T="string" Placeholder="Search" Adornment="Adornment.Start"
                AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>

        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<Models.Medicine, object>(x=>x.MedicineId)">Mã thuốc</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Models.Medicine, object>(x=>x.Name)">Tên</MudTableSortLabel></MudTh>
            <MudTh>Đơn vị</MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Models.Medicine, object>(x=>x.SellingPrice)">Giá bán</MudTableSortLabel></MudTh>
            <MudTh>Cách dùng</MudTh>
            <MudTh>Chức năng</MudTh>
        </HeaderContent>
        <RowTemplate >
            <MudTd DataLabel="Mã thuốc">@context.MedicineId</MudTd>
            <MudTd DataLabel="Tên">@context.Name</MudTd>
            <MudTd DataLabel="Đơn vị">@context.Unit</MudTd>
            <MudTd DataLabel="Giá bán">@context.SellingPrice</MudTd>
            <MudTd DataLabel="Cách dùng">@context.HowToUse</MudTd>
            <MudTd>
                <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" Size="Size.Medium" OnClick="(e) => ShowUpdate(context.Id)"/>
                <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Medium" OnClick="(e) => ShowDelete(context.Id)"/>
                <MudIconButton Icon="@Icons.Material.Filled.Info" Color="Color.Info" Size="Size.Medium" OnClick="(e) => ShowDetail(context.Id)" />
            </MudTd>
        </RowTemplate>

        <PagerContent>
            <MudTablePager />
        </PagerContent>

        <NoRecordsContent>
            <MudText>Không tìm thấy dữ liệu</MudText>
        </NoRecordsContent>

        <LoadingContent>
            <MudText>Loading...</MudText>
        </LoadingContent>

        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>

    <MudExpansionPanel @bind-IsExpanded="isOpen" HideIcon="true">
        <TitleContent>
            <MudText>Nhóm</MudText>
        </TitleContent>
        <ChildContent>
            <MudList Clickable="true">
                <MudListItem Text="Tất cả" OnClick="(e) => FilterByMedicineGroupName(null)"/>
                @foreach (var item in medicineGroups)
                {
                <MudListItem Text=@item.Name OnClick="(e) => FilterByMedicineGroupName(item.Name)"/>
                }
            </MudList>
        </ChildContent>
    </MudExpansionPanel>
</MudPaper>
    </Authorized>
</AuthorizeView>

@code {
    private IEnumerable<Models.Medicine> medicines = new List<Models.Medicine>();

    private IEnumerable<Models.MedicineGroup> medicineGroups = new List<Models.MedicineGroup>();

    private bool isOpen = true;

    private string searchS = new string("");

    protected override async Task OnInitializedAsync()
    {
        medicines = await MedicineService.GetMedicines();
        medicineGroups = await MedicineService.GetMedicineGroups();
    }

    private async Task ShowDetail(string Id)
    {
        var parameter = new DialogParameters { ["Id"] = Id };
        var dialog = await DialogService.ShowAsync<MedicineDetailPopUp>("Thông tin thuốc", parameter);
        var result = await dialog.Result;
    }

    private async Task ShowAdd()
    {
        var dialog = await DialogService.ShowAsync<MedicineCreatePopUp>("Thêm thông tin thuốc");
        var result = await dialog.Result;
        await InvokeAsync(OnInitializedAsync);
    }

    private async Task ShowUpdate(string id)
    {
        var parameter = new DialogParameters { ["Id"] = id };
        var dialog = await DialogService.ShowAsync<MedicineUpdatePopUp>("Chỉnh sửa thông tin thuốc", parameter);
        var result = await dialog.Result;
        await InvokeAsync(OnInitializedAsync);
    }

    private async Task ShowDelete(string id)
    {
        var parameter = new DialogParameters { ["Id"] = id };
        var dialog = await DialogService.ShowAsync<MedicineDeletePopUp>("Xóa thông tin thuốc", parameter);
        var result = await dialog.Result;
        await InvokeAsync(OnInitializedAsync);
    }

    private async Task FilterByMedicineGroupName(string? medicineGroupName)
    {
        if (string.IsNullOrWhiteSpace(medicineGroupName)) medicines = await MedicineService.GetMedicines();
        else medicines = await MedicineService.GetMedicineByGroupName(medicineGroupName);
        await InvokeAsync(StateHasChanged);
    }

    private bool FilterS(Models.Medicine medicine) => FilterSearch(medicine, searchS);

    private bool FilterSearch(Models.Medicine medicine, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if (medicine.Name?.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true) return true;
        if (medicine.MedicineId?.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true) return true;
        if (medicine.HowToUse?.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true) return true;
        if (medicine.Unit?.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true) return true;
        if (medicine.SellingPrice.ToString().Equals(searchString) == true) return true;
        return false;
    }
}

