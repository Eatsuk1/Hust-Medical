@page "/billing"
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IBillingService BillingService
@inject IPatientService PatientService
@inject NavigationManager NavigationManager

<MudPaper Style="overflow:hidden; position:relative; margin-left:56px; margin-top:60px">
    <MudTable Items="billings" Hover="true" Bordered="true" Striped="true" Filter="new Func<Billing, bool>(FilterS)"
        Breakpoint="Breakpoint.Sm" SortLabel="SortBy">
        <ToolBarContent>
            <MudTextField Immediate="true" @bind-Value="searchS" T="string" Placeholder="Search"
                Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"
                Class="mt-0"></MudTextField>
        </ToolBarContent>

        <HeaderContent>
            <MudTh>Mã hoá đơn</MudTh>
            <MudTh>Mã bệnh nhân</MudTh>
            <MudTh>Tên bệnh nhân</MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<Billing, object>(b => b.CreatedAt)">
                    Ngày tạo
                </MudTableSortLabel>
            </MudTh>
            <MudTh>Tình trạng thanh toán</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Mã hoá đơn">@context.BillId</MudTd>
            <MudTd DataLabel="Mã bệnh nhân">@patients.Where(p => p.Id.Equals(context.PatientId)).First().PatientId
            </MudTd>
            <MudTd DataLabel="Tên bệnh nhân">@patients.Where(p => p.Id.Equals(context.PatientId)).First().Name</MudTd>
            <MudTd DataLabel="Ngày tạo">@context.CreatedAt.ToLocalTime().ToString("dd/MM/yyyy hh:MM")</MudTd>
            <MudTd DataLabel="Tình trạng thanh toán">
                <MudChip Color="context.IsPaid ? Color.Success : Color.Error">@context.IsPaid ? "Đã thanh toán" : "Chưa
                    thanh toán"</MudChip>
            </MudTd>
        </RowTemplate>
    </MudTable>
</MudPaper>

@code {
private IEnumerable<Billing> billings = new List<Billing>();
    private IEnumerable<Patient> patients = new List<Patient>();
    private string searchS = new string("");

    protected override async Task OnInitializedAsync()
    {
        billings = await BillingService.GetBillings();
        patients = await PatientService.GetPatients();
    }

    private bool FilterS(Billing billing) => FilterSearch(billing, searchS);

    private bool FilterSearch(Billing billing, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (billing.BillId.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (patients.Any(p => p.PatientId.Contains(searchString, StringComparison.OrdinalIgnoreCase)))
            return true;
        if (patients.Any(p => p.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase)))
            return true;
        return false;
    }
}
