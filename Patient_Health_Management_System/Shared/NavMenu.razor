@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<MudDrawer Open="true" Elevation="0" Variant="@DrawerVariant.Persistent" Color="Color.Transparent">
    <div style="display:flex; flex-direction:column; justify-content:space-between; height:100%; margin-top:10px">
        <div class="pl-5 pr-3">
            <MudDrawerHeader>
                <MudLink Href="@homeUrl" Typo="Typo.h4" Underline="Underline.None">HustMec</MudLink>
            </MudDrawerHeader>
            <MudNavMenu>
                <AuthorizeView Roles="@role">
                    @foreach (var item in NavItem)
                    {
                        <MudNavLink ActiveClass="active-nav-link mud-dark-text" style="@($"color:#9E9E9E; font-size:18px")"
                            Class="rounded-xl ml-3 mt-3 mb-3" Href="@item.NavLinkItem.Href" Match="NavLinkMatch.All"
                            Icon="@item.NavLinkItem.Icon">
                            @item.ItemContent</MudNavLink>
                    }
                </AuthorizeView>
            </MudNavMenu>
        </div>
        <div style="padding-left:46px; padding-right:12px; margin-bottom:20px">
            <form method="post" action="Account/Logout">
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Text" Color="Color.Secondary"
                    Style="text-transform:none;" StartIcon="@Icons.Material.Filled.Logout">Đăng xuất</MudButton>
            </form>
        </div>
    </div>
</MudDrawer>

@code {
    bool open = false;

    private List<NavItem> NavItem = new List<NavItem>();

    private string role = string.Empty;

    private string homeUrl = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await GetUserRole();
        DisplayNavMenu();
    }

    void ToggleDrawer()
    {
        open = !open;
    }

    private async Task GetUserRole()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity.IsAuthenticated)
        {
            role = authState.User.Claims
            .Where(c => c.Type.Equals(ClaimTypes.Role))
            .SingleOrDefault().Value;
        }
        else NavigationManager.NavigateTo("/auth/login");
    }

    private void DisplayHomeUrl()
    {
        if(role == "Doctor" || role == "Admin")
		{
			homeUrl = "/home";
		}
		else if(role == "Cashier")
		{
			homeUrl = "/billing";
		}
		else if(role == "Warehouse Manager")
		{
			homeUrl = "/medicine";
		}
    }

    private void DisplayNavMenu()
    {
        if (role == "Doctor" || role == "Admin")
        {
            NavItem.Add(new NavItem()
                {
                    ItemContent = "Trang chủ",
                    NavLinkItem = new MudNavLink()
                    {
                         Href = "/home",
                         Icon = MudBlazor.Icons.Material.Filled.Store,
                    }
                });
            NavItem.Add(new NavItem()
                {
                    ItemContent = "Quản lý bệnh nhân",
                    NavLinkItem = new MudNavLink()
                    {
                        Href = "patient",
                        Icon = MudBlazor.Icons.Material.Filled.EmojiEmotions,
                    }
                });
            NavItem.Add(new NavItem()
                {
                    ItemContent = "Quản lý đơn khám",
                    NavLinkItem = new MudNavLink()
                    {
                        Href = "medicalExamination",
                        Icon = MudBlazor.Icons.Material.Filled.Sick,
                    }
                });
            NavItem.Add(new NavItem()
                {
                    ItemContent = "Quản lý đơn thuốc",
                    NavLinkItem = new MudNavLink()
                    {
                        Href = "prescription",
                        Icon = MudBlazor.Icons.Custom.FileFormats.FileDocument,
                    }
                });
        }
        if (role == "Cashier" || role == "Admin")
        {
            NavItem.Add(new NavItem()
                {
                    ItemContent = "Quản lý hoá đơn",
                    NavLinkItem = new MudNavLink()
                    {
                        Href = "billing",
                        Icon = MudBlazor.Icons.Material.Filled.Paid,
                    }
                });
        }
        if (role == "Warehouse Manager" || role == "Admin")
        {
            NavItem.Add(new NavItem()
                {
                    ItemContent = "Quản lý thuốc",
                    NavLinkItem = new MudNavLink()
                    {
                        Href = "medicine",
                        Icon = MudBlazor.Icons.Material.Filled.Medication,
                    }
                });
        }
        if (role.Equals("Admin"))
        {
            NavItem.Add(new NavItem()
                {
                    ItemContent = "Quản lý người dùng",
                    NavLinkItem = new MudNavLink()
                    {
                        Href = "user_management",
                        Icon = MudBlazor.Icons.Material.Filled.ManageAccounts,
                    }
                });
            NavItem.Add(new NavItem()
                {
                    ItemContent = "Thống kê",
                    NavLinkItem = new MudNavLink()
                    {
                        Href = "statistic",
                        Icon = MudBlazor.Icons.Material.Filled.QueryStats,
                    }
                });
        }
        NavItem.Add(new NavItem()
            {
                ItemContent = "Trợ giúp",
                NavLinkItem = new MudNavLink()
                {
                    Href = "support",
                    Icon = MudBlazor.Icons.Material.Filled.Help,
                }
            });
    }
}

