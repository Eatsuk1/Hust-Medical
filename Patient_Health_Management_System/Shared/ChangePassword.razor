@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedLocalStorage ProtectedLocalStorage
@inject IAccountService AccountService

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3 mb-n1" />
            Thay đổi mật khẩu
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @bind-IsValid="@success">
            <MudTextField @bind-Value="@password" Label="Mật khẩu mới" InputType="InputType.Password" Required="true" RequiredError="Mật khẩu mới không hợp lệ" />
			<MudTextField @bind-Value="@confirmPassword" Label="Nhập lại mật khẩu mới" InputType="InputType.Password" Validation="@(new Func<string, string?>(PasswordMatchValidator))" Required="true"/>
		</MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Outlined" OnClick="@(_ => Cancel())">Hủy</MudButton>
        <MudButton Color="Color.Primary" OnClick="@(_ => Submit())" Disabled="@(!success)">Lưu</MudButton>
    </DialogActions>
</MudDialog>

@code {

    [Parameter]
    public string UserId { get; set; }

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    private string password = new string("");

    private string confirmPassword = new string("");

    private string? accessToken = new string("");

    bool success;

    protected override async Task OnInitializedAsync()
    {
        accessToken = await GetAccessToken();
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private async void Submit()
    {
        await AccountService.ChangePassword(UserId, accessToken, password);
        MudDialog.Close(DialogResult.Ok(true));
    }

    private string? PasswordMatchValidator(string cfpw)
	{
		if (cfpw != password)
		{
			return "Mật khẩu không khớp";
		}
		return null;
	}

    private async Task<string> GetAccessToken()
    {
        var existToken = await ProtectedLocalStorage.GetAsync<string>("access_token");
        if (String.IsNullOrEmpty(existToken.Value) || AccountService.IsExpired(existToken.Value))
        {
            var newToken = await AccountService.TokenGenerator();
            await ProtectedLocalStorage.SetAsync("access_token", newToken.access_token);
            existToken = await ProtectedLocalStorage.GetAsync<string>("access_token");
        }
        return existToken.Value;
    }
}
