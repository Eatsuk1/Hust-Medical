@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedLocalStorage ProtectedLocalStorage
@inject IAccountService AccountService
@inject IUserService UserService
@inject ISnackbar Snackbar

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3 mb-n1" />
            Thay đổi email
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @bind-IsValid="@success">
            <MudTextField @bind-Value="@email" Label="Email mới" InputType="InputType.Email" Required="true" RequiredError="Email không được bỏ trống" />
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@(_ => Cancel())">Hủy</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(_ => Submit())" Disabled="@(!success)">Lưu</MudButton>
    </DialogActions>
</MudDialog>

@code {

    [Parameter]
    public string UserId { get; set; }

    [Parameter]
    public string AdminId { get; set; }

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    private string email = string.Empty;

    private string accessToken = string.Empty;

    private bool success = false;

    protected override async Task OnInitializedAsync()
    {
        accessToken = await GetAccessToken();
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private async void Submit()
    {
        await AccountService.ChangeEmail(UserId, accessToken, email);
        await UserService.ChangeUserEmailByUserId(UserId, AdminId, email);
        await Task.Delay(10);
        await AccountService.SendVerificationEmail(UserId, accessToken);
        Snackbar.Add("Đổi email thành công", Severity.Success);
        MudDialog.Close(DialogResult.Ok(true));
    }

    private async Task<string> GetAccessToken()
    {
        var existToken = await ProtectedLocalStorage.GetAsync<string>("access_token");
        if (String.IsNullOrEmpty(existToken.Value) || AccountService.IsExpired(existToken.Value))
        {
            var newToken = await AccountService.TokenGenerator();
            await ProtectedLocalStorage.SetAsync("access_token", newToken.access_token);
            existToken = await ProtectedLocalStorage.GetAsync<string>("access_token");
        }
        return existToken.Value;
    }
}
