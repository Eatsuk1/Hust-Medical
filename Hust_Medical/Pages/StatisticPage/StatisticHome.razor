@page "/statistic"
@attribute [Authorize(Roles = "Admin")]
@using System.Globalization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IPatientService PatientService
@inject IPrescriptionService PrescriptionService
@inject IDialogService DialogService

<PageTitle>Thống kê</PageTitle>
<HeadContent>
    <link rel="icon" href="./assets/icns/analytics.ico" />
</HeadContent>

<div class="d-flex" style="height:43rem; background-color:#FAFAFA; border-radius:20px; width:96.7%; overflow:auto">
    <div style="display:flex; flex-direction:column; padding-top:1rem; margin:0px 20px; width:96.7%">
        <div>
            <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="ShowStatisticReportExport">Xuất báo cáo thống kê</MudButton>
        </div>
        <MudCarousel Style="height:100%" ShowBullets="true" AutoCycle="false" ShowArrows="false" TData="object">
            <MudCarouselItem Style="display:flex; justify-content:center" Transition="Transition.Slide">
            <div style="display:flex">
                <MudText Typo="Typo.body1" Style="display:flex; align-items:center; font-weight:bold; margin: 0px 10px">Biểu đồ số bệnh nhân theo ngày</MudText>
                <MudChart ChartType="ChartType.Bar" ChartSeries="@listPatientSeries" @bind-SelectedIndex="Index" XAxisLabels="@patientXAxisLabels" Width="100vh" Height="500px" ChartOptions="@patientChartOption"></MudChart>
                <div style="display:flex; justify-content:center; align-items:center; flex:1; flex-direction:column; margin-left:10px">
                    <MudText Typo="Typo.body1" Style="font-weight:bold; margin-bottom:5px">Lọc theo khoảng thời gian (tuần) </MudText>
				    <div>
                        <MudDatePicker @ref="pickerPatientChart" Label="Từ ngày" DisableToolbar="true" Placeholder="chọn ngày bắt đầu" @bind-Date="defaultDatePatientChart">
                            <PickerActions>
                                <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="@(async () => await OnChangeDatePatientChart())">Ok</MudButton>
                            </PickerActions>
                        </MudDatePicker>
                    </div>
                </div>
		    </div>
            </MudCarouselItem>
            <MudCarouselItem Style="display:flex; justify-content:center" Transition="Transition.Slide">
            <div style="display:flex">
                <MudText Typo="Typo.body1" Style="display:flex; align-items:center; font-weight:bold; margin: 0px 10px">Biểu đồ doanh thu (đơn vị: đồng)</MudText>
                <MudChart ChartType="ChartType.Bar" ChartSeries="@listRevenueSeries" @bind-SelectedIndex="Index" XAxisLabels="@revenueXAisLabels" Width="100vh" Height="450px" ChartOptions="@revenueChartOption"></MudChart>
                <div style="display:flex; justify-content:center; align-items:center; flex:1; flex-direction:column; margin-left:10px">
                    <MudText Typo="Typo.body1" Style="font-weight:bold; margin-bottom:5px">Lọc theo khoảng thời gian (tuần) </MudText>
                    <div>
                        <MudDatePicker @ref="pickerRevenueChart" Label="Từ ngày" DisableToolbar="true" Placeholder="chọn ngày bắt đầu" @bind-Date="defaultDateRevenueChart">
                            <PickerActions>
                                <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="@(async () => await OnChangeDateRevenueChart())">Ok</MudButton>
                            </PickerActions>
                        </MudDatePicker>
                    </div>
                </div>
            </div>
            </MudCarouselItem>
        </MudCarousel>
    </div>
</div>

@code {
    private int Index = -1; //default value cannot be 0 -> first selectedindex is 0.

    //List of chart series
    private List<ChartSeries> listPatientSeries = new List<ChartSeries>();
    private List<ChartSeries> listRevenueSeries = new List<ChartSeries>();

    //Patient chart
    private ChartSeries patientSeries = new ChartSeries();
    private ChartOptions patientChartOption = new ChartOptions();
    private string[] patientXAxisLabels = new string[7];
    private DateTime[] patientWeek = new DateTime[7];

    //Revenue chart
    private ChartSeries revenueSeries = new ChartSeries();
    private ChartOptions revenueChartOption = new ChartOptions();
    private string[] revenueXAisLabels = new string[7];
    private DateTime[] revenueWeek = new DateTime[7];

    //Default date
    private DateTime? defaultDatePatientChart = DateTime.Today.AddDays(-6);
    private DateTime? defaultDateRevenueChart = DateTime.Today.AddDays(-6);

    //Picker
    private MudDatePicker pickerPatientChart;
    private MudDatePicker pickerRevenueChart;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity.IsAuthenticated)
        {
            var autoRefreshUI = new Timer( _ =>
            {
                InvokeAsync(async () =>
                {
                    await SetPatientChart();
                    await SetRevenueChart();
                    StateHasChanged();
                });
            }, null, 0, 1000);
        }
        else NavigationManager.NavigateTo("/auth/login");
    }

    //Set value patient chart
    private async Task SetPatientChart()
    {
        listPatientSeries.Clear();
        patientWeek[0] = defaultDatePatientChart.Value.ToLocalTime();
        patientXAxisLabels[0] = patientWeek[0].ToString("dd/MM/yyyy");
        for (int i = 1; i < 7; i++)
        {
            patientWeek[i] = patientWeek[0].AddDays(i);
            patientXAxisLabels[i] = patientWeek[i].ToString("dd/MM/yyyy");
        }
        patientSeries.Name = "Số bệnh nhân tới khám";
        patientSeries.Data = new double[patientXAxisLabels.Length];
        for (int i = 0; i < patientSeries.Data.Length; i++)
        {
            patientSeries.Data[i] = await PatientService.GetNumberPatientsByCreatedDay(patientWeek[i]);
        }
        patientChartOption.YAxisTicks = 1;
        patientChartOption.MaxNumYAxisTicks = 5*10;
        listPatientSeries.Add(patientSeries);
    }

    private async Task OnChangeDatePatientChart()
    {
        pickerPatientChart.Close();
        await SetPatientChart();
	}

    //Set value revenue chart
    private async Task SetRevenueChart()
    {
        listRevenueSeries.Clear();
        revenueWeek[0] = defaultDateRevenueChart.Value.ToLocalTime();
        revenueXAisLabels[0] = revenueWeek[0].ToString("dd/MM/yyyy");
        for (int i = 1; i < 7; i++)
        {
            revenueWeek[i] = revenueWeek[0].AddDays(i);
            revenueXAisLabels[i] = revenueWeek[i].ToString("dd/MM/yyyy");
        }
        revenueSeries.Name = "Doanh thu theo đơn thuốc";
        revenueSeries.Data = new double[revenueXAisLabels.Length];
        for (int i = 0; i < revenueSeries.Data.Length; i++)
		{
			revenueSeries.Data[i] = await PrescriptionService.GetRevenueMedicinePrescribedByCreatedDay(revenueWeek[i]);
		}
        revenueChartOption.YAxisTicks = 5*10000;
        revenueChartOption.MaxNumYAxisTicks = 5*1000000;
		listRevenueSeries.Add(revenueSeries);
        //listRevenueSeries.Add(
        //new ChartSeries() { Name = "Doanh thu theo dịch vụ khám", Data = new double[] { 19000, 24000, 35000, 130000, 28000, 15000, 130000 } }
        //);
    }

    private async Task OnChangeDateRevenueChart()
    {
        pickerRevenueChart.Close();
        await SetRevenueChart();
    }

    private async Task ShowStatisticReportExport()
    {
        var dialog = await DialogService.ShowAsync<StatisticReportExport>("Chọn khoảng thời gian cho báo cáo thống kê");
        var result = await dialog.Result;
        if (!result.Canceled) await InvokeAsync(OnInitializedAsync);
    }
}