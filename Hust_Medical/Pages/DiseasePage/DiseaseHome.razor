@page "/disease"
@attribute [Authorize(Roles = "Doctor, Admin")]
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IDiseaseService DiseaseService
@inject IDialogService DialogService
@layout MainLayout

<AuthorizeView Context="contextAuthorize">
    <NotAuthorized>
        <MudText>Not Authorized</MudText>
    </NotAuthorized>
    <Authorized>
    <div class="d-flex">
        <div style="display:flex; height:50rem; background-color:#FAFAFA; border-radius:20px; width: 66.5%">
            <div style="display:flex; flex:1; flex-direction:column; padding-top:1rem; margin:0px 20px; width:66.5%">
                    <MudText Typo="Typo.h6" Style="padding-bottom:10px">Danh sách bệnh</MudText>
        <MudDataGrid T="Disease" MultiSelection="true" Items="@diseases" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@FilterS" FixedHeader="true"
                     FilterCaseSensitivity="DataGridFilterCaseSensitivity.CaseInsensitive" FilterMode="DataGridFilterMode.ColumnFilterMenu"
                     Hideable="true" Striped="true" Bordered="true" Style="overflow:auto; position:relative; width:100%; border-radius:20px;" Height="600px">
            <ToolBarContent>
                <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="() => ShowDiseaseCreate()">Thêm bệnh mới</MudButton>
                <MudSpacer />
                <MudTextField Immediate="true" @bind-Value="searchS" T="string" Placeholder="Tìm kiếm bệnh"
                              Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"
                              Class="mt-0"></MudTextField>
            </ToolBarContent>
            <Columns>
                <SelectColumn T="Disease" />
                <PropertyColumn Property="d => d.DiseaseId" Title="Mã bệnh" Sortable="true" Filterable="true" />
                <PropertyColumn Property="d => d.Name" Title="Tên bệnh" Sortable="true" Filterable="true" />
                <PropertyColumn Property="d => d.GroupName" Title="Tên nhóm bệnh" Sortable="true" Filterable="true" />
                <TemplateColumn Sortable="false" Filterable="false" Title="Chức năng">
                    <CellTemplate>
                        <MudStack Row>
                            <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" Size="Size.Medium"
                                           OnClick="(e) => ShowDiseaseUpdate(context.Item.Id, context.Item)" />
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Medium"
                                           OnClick="(e) => ShowDiseaseDelete(context.Item.Id, context.Item.Name)" />
                        </MudStack>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
            <NoRecordsContent>
                <MudText>Không tìm thấy dữ liệu</MudText>
            </NoRecordsContent>
            <LoadingContent>
                <MudText>Loading...</MudText>
            </LoadingContent>
            <PagerContent>
                <MudDataGridPager T="Disease" />
            </PagerContent>
        </MudDataGrid>
        </div>
    </div>

        <div style="display:flex; height:50rem; background-color:#FAFAFA; border-radius:20px; margin-left:45px; width:27.5%">
            <div style="display:flex; flex:1; flex-direction:column; padding-top:1rem; margin:0px 20px; width:27.5%">
                <MudText Typo="Typo.h6" Style="padding-bottom:10px">Nhóm bệnh</MudText>

                <MudTable Elevation="2" T="DiseaseGroup" Items="@diseaseGroups" Bordered="true" Striped="true" FixedHeader="true"
                          SortLabel="Sort By" @ref="diseaseGroupTable"
                          Style="overflow:auto; position:relative; border-radius:20px;" Height="650px">
                    <ToolBarContent>
                        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="() => ShowDiseaseGroupCreate()">Thêm</MudButton>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh>Tên nhóm</MudTh>
                        <MudTh>Chức năng</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Tên nhóm">@context.Name</MudTd>
                        <MudTd>
                            <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" Size="Size.Medium"
                                           OnClick="(e) => ShowDiseaseGroupUpdate(context.Id, context.Name)" />
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Medium"
                                           OnClick="(e) => ShowDiseaseGroupDelete(context.Id, context.Name)" />
                        </MudTd>
                    </RowTemplate>

                    <NoRecordsContent>
                        <MudText>Không tìm thấy dữ liệu</MudText>
                    </NoRecordsContent>

                    <LoadingContent>
                        <MudText>Loading...</MudText>
                    </LoadingContent>
                </MudTable>
            </div>
        </div>
    </div>
    </Authorized>
</AuthorizeView>

@code{
    private IEnumerable<Disease> diseases = new List<Disease>();
    private IEnumerable<DiseaseGroup> diseaseGroups = new List<DiseaseGroup>();
    private MudTable<DiseaseGroup> diseaseGroupTable;
    private string searchS = new string("");
    private string userId = new string("");

    protected override async Task OnInitializedAsync()
    {
        diseases = await DiseaseService.GetDiseases();
        diseaseGroups = await DiseaseService.GetDiseaseGroups();
    }

    #region Disease
    private async Task ShowDiseaseCreate()
    {
        var parameter = new DialogParameters { ["UserId"] = userId };
        var dialog = DialogService.Show<DiseaseCreatePopUp>("Thêm thông tin bệnh");
        var result = await dialog.Result;
        if (!result.Canceled) await InvokeAsync(OnInitializedAsync);
    }

    private async Task ShowDiseaseUpdate(string id, Disease disease)
    {
        var parameter = new DialogParameters { ["Id"] = id, ["UserId"] = userId, ["Disease"] = disease };
        var dialog = DialogService.Show<DiseaseUpdatePopUp>("Sửa thông tin bệnh", parameter);
        var result = await dialog.Result;
        if (!result.Canceled) await InvokeAsync(OnInitializedAsync);
    }

    private async Task ShowDiseaseDelete(string id, string diseaseName)
    {
        var parameter = new DialogParameters { ["Id"] = id, ["UserId"] = userId, ["DiseaseName"] = diseaseName };
        var dialog = DialogService.Show<DiseaseDeletePopUp>("Xóa thông tin bệnh", parameter);
        var result = await dialog.Result;
        if (!result.Canceled) await InvokeAsync(OnInitializedAsync);
    }
    #endregion

    #region Disease Group
    private async Task ShowDiseaseGroupCreate()
    {
        var parameter = new DialogParameters { ["UserId"] = userId };
        var dialog = await DialogService.ShowAsync<DiseaseGroupPage.DiseaseGroupCreatePopUp>("Thêm nhóm bệnh", parameter);
        var result = await dialog.Result;
        if(!result.Canceled) await InvokeAsync(OnInitializedAsync);
        
    }

    private async Task ShowDiseaseGroupUpdate(string id, string diseaseGroupName)
    {
        var parameter = new DialogParameters { ["Id"] = id, ["DiseaseGroupName"] = diseaseGroupName, ["UserId"] = userId };
        var dialog = await DialogService.ShowAsync<DiseaseGroupPage.DiseaseGroupUpdatePopUp>("Chỉnh sửa tên nhóm thuốc", parameter);
        var result = await dialog.Result;
        if (!result.Canceled) await InvokeAsync(OnInitializedAsync);
    }

    private async Task ShowDiseaseGroupDelete(string id, string diseaseGroupName)
    {
        var parameter = new DialogParameters { ["Id"] = id, ["DiseaseGroupName"] = diseaseGroupName, ["UserId"] = userId };
        var dialog = await DialogService.ShowAsync<DiseaseGroupPage.DiseaseGroupDeletePopUp>("Xóa nhóm thuốc", parameter);
        var result = await dialog.Result;
        if (!result.Canceled) await InvokeAsync(OnInitializedAsync);
    }
    #endregion

    private bool FilterS(Domain.Models.Disease disease) => FilterSearch(disease, searchS);

    private bool FilterSearch(Domain.Models.Disease disease, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if (disease.Name?.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true) return true;
        if (disease.DiseaseId?.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true) return true;
        if (disease.GroupName?.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true) return true;
        return false;
    }

    private async Task GetUserId()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        userId = authState.User.Claims
        .Where(c => c.Type.Equals(ClaimTypes.Role))
        .SingleOrDefault().Value;
    }
}