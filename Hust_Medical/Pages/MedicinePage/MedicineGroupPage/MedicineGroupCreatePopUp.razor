@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ISnackbar Snackbar
@inject IMedicineService MedicineService

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Create" Class="mr-3 mb-n1" />
            Thêm nhóm thuốc mới
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @bind-IsValid="@success">
            <MudTextField @bind-Value="@medicineGroupForm.Name" Label="Tên nhóm thuốc" ReadOnly="false" Required="true" RequiredError="Tên nhóm thuốc không được bỏ trống" />
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@(_ => MudDialog.Cancel())">Hủy</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" OnClick="@(_ => Submit())">Lưu</MudButton>
    </DialogActions>
</MudDialog>


@code {
    private MedicineGroupForm medicineGroupForm = new MedicineGroupForm();
    private string userId = string.Empty;
    private bool success = false;

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetUserId();
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private async Task Submit()
    {
        await MedicineService.CreateMedicineGroup(medicineGroupForm, userId);
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        Snackbar.Add("Thêm nhóm thuốc thành công!", Severity.Success);
        MudDialog.Close(DialogResult.Ok(true));
    }

    private async Task GetUserId()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        userId = authState.User.Claims
        .Where(c => c.Type.Equals(ClaimTypes.Role))
        .SingleOrDefault().Value;
    }
}
