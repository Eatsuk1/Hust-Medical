@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ISnackbar Snackbar
@inject IMedicineService MedicineService
@inject IMapper mapper

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3 mb-n1" />
            Sửa thông tin thuốc
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @bind-IsValid="@success">
            <MudTextField @bind-Value="@medicineForm.Name" Label="Tên thuốc" ReadOnly="false" Required="true" RequiredError="Tên thuốc không được bỏ trống" />
            <MudTextField @bind-Value="@medicineForm.Unit" Label="Đơn vị" ReadOnly="false" Required="true" RequiredError="Đơn vị không được bỏ trống" />
            <MudNumericField @bind-Value="@medicineForm.SellingPrice" Label="Giá bán" ReadOnly="false" Min="0" HideSpinButtons="true"/>
            @*<MudNumericField @bind-Value="@medicineForm.QuantityDefault" Label="Mặc định mỗi ngày" ReadOnly="false" Min="0" HideSpinButtons="true" />*@
            <MudTextField @bind-Value="@medicineForm.HowToUse" Label="Cách dùng" ReadOnly="false" Required="true" RequiredError="Cách dùng không được bỏ trống" />
            <MudAutocomplete T="string" Label="Nhóm thuốc" @bind-Value="@medicineForm.GroupName" SearchFunc="@OnSearchMedicineGroup" ResetValueOnEmptyText="true" MaxItems="null" />
            <MudNumericField @bind-Value="@medicineForm.ImportPrice" Label="Giá nhập" ReadOnly="false" Min="0" HideSpinButtons="true" />
            <MudNumericField @bind-Value="@medicineForm.MinimumStock" Label="Tồn kho" ReadOnly="false" Min="0" HideSpinButtons="true" />
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@(_ => MudDialog.Cancel())">Hủy</MudButton>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" Disabled="@(!success)" OnClick="@(_ => Submit())">Lưu</MudButton>
    </DialogActions>
</MudDialog>


@code {
    private MedicineForm medicineForm = new MedicineForm();

    private Medicine medicine = new Medicine();

    private string userId = string.Empty;

    private bool success = false;

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public string Id { get; set; }

    [Parameter]
    public List<MedicineGroup> MedicineGroups { get; set; }

    protected override async Task OnInitializedAsync()
    {
        medicine = await MedicineService.GetMedicineById(Id);
        mapper = new MapperConfiguration(cfg => cfg.CreateMap<Domain.Models.Medicine, MedicineForm>()).CreateMapper();
        medicineForm = mapper.Map<MedicineForm>(medicine);
        await GetUserId();
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private async Task Submit()
    {
        await MedicineService.UpdateMedicineById(Id, medicineForm, userId);
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        Snackbar.Add("Cập nhật thông tin thuốc thành công!", Severity.Success);
        MudDialog.Close(DialogResult.Ok(true));
    }

    private async Task<IEnumerable<string>> OnSearchMedicineGroup(string inputSearch)
    {
        if (string.IsNullOrEmpty(inputSearch))
        {
            return MedicineGroups.Select(mg => mg.Name);
        }
        await Task.Delay(0);
        return MedicineGroups.Where(mg => mg.Name.Contains(inputSearch, StringComparison.InvariantCultureIgnoreCase)).Select(d => d.Name);
    }

    private async Task GetUserId()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        userId = authState.User.Claims
        .Where(c => c.Type.Equals(ClaimTypes.NameIdentifier))
        .SingleOrDefault().Value;
    }
}
